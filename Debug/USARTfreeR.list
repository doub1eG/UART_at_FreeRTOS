
USARTfreeR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007470  08007470  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000555c  20000010  08007488  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000556c  08007488  0002556c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8b3  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ff  00000000  00000000  0003d8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00042158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037bd  00000000  00000000  00043498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001806d  00000000  00000000  00046c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001049e5  00000000  00000000  0005ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001636a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  001636fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080072a0 	.word	0x080072a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080072a0 	.word	0x080072a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96e 	b.w	8000544 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468c      	mov	ip, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	f040 8083 	bne.w	8000396 <__udivmoddi4+0x116>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d947      	bls.n	8000326 <__udivmoddi4+0xa6>
 8000296:	fab2 f282 	clz	r2, r2
 800029a:	b142      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029c:	f1c2 0020 	rsb	r0, r2, #32
 80002a0:	fa24 f000 	lsr.w	r0, r4, r0
 80002a4:	4091      	lsls	r1, r2
 80002a6:	4097      	lsls	r7, r2
 80002a8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbbc f6f8 	udiv	r6, ip, r8
 80002b8:	fa1f fe87 	uxth.w	lr, r7
 80002bc:	fb08 c116 	mls	r1, r8, r6, ip
 80002c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c4:	fb06 f10e 	mul.w	r1, r6, lr
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d2:	f080 8119 	bcs.w	8000508 <__udivmoddi4+0x288>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8116 	bls.w	8000508 <__udivmoddi4+0x288>
 80002dc:	3e02      	subs	r6, #2
 80002de:	443b      	add	r3, r7
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	f080 8105 	bcs.w	800050c <__udivmoddi4+0x28c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f240 8102 	bls.w	800050c <__udivmoddi4+0x28c>
 8000308:	3802      	subs	r0, #2
 800030a:	443c      	add	r4, r7
 800030c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000310:	eba4 040e 	sub.w	r4, r4, lr
 8000314:	2600      	movs	r6, #0
 8000316:	b11d      	cbz	r5, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c5 4300 	strd	r4, r3, [r5]
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xaa>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	2a00      	cmp	r2, #0
 8000330:	d150      	bne.n	80003d4 <__udivmoddi4+0x154>
 8000332:	1bcb      	subs	r3, r1, r7
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	fa1f f887 	uxth.w	r8, r7
 800033c:	2601      	movs	r6, #1
 800033e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000342:	0c21      	lsrs	r1, r4, #16
 8000344:	fb0e 331c 	mls	r3, lr, ip, r3
 8000348:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800034c:	fb08 f30c 	mul.w	r3, r8, ip
 8000350:	428b      	cmp	r3, r1
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000354:	1879      	adds	r1, r7, r1
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0xe2>
 800035c:	428b      	cmp	r3, r1
 800035e:	f200 80e9 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 8000362:	4684      	mov	ip, r0
 8000364:	1ac9      	subs	r1, r1, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000370:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x10c>
 800037c:	193c      	adds	r4, r7, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x10a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80d9 	bhi.w	800053c <__udivmoddi4+0x2bc>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e7bf      	b.n	8000316 <__udivmoddi4+0x96>
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x12e>
 800039a:	2d00      	cmp	r5, #0
 800039c:	f000 80b1 	beq.w	8000502 <__udivmoddi4+0x282>
 80003a0:	2600      	movs	r6, #0
 80003a2:	e9c5 0100 	strd	r0, r1, [r5]
 80003a6:	4630      	mov	r0, r6
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f683 	clz	r6, r3
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d14a      	bne.n	800044c <__udivmoddi4+0x1cc>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0x140>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80b8 	bhi.w	8000530 <__udivmoddi4+0x2b0>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0103 	sbc.w	r1, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	468c      	mov	ip, r1
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	d0a8      	beq.n	8000320 <__udivmoddi4+0xa0>
 80003ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80003d2:	e7a5      	b.n	8000320 <__udivmoddi4+0xa0>
 80003d4:	f1c2 0320 	rsb	r3, r2, #32
 80003d8:	fa20 f603 	lsr.w	r6, r0, r3
 80003dc:	4097      	lsls	r7, r2
 80003de:	fa01 f002 	lsl.w	r0, r1, r2
 80003e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e6:	40d9      	lsrs	r1, r3
 80003e8:	4330      	orrs	r0, r6
 80003ea:	0c03      	lsrs	r3, r0, #16
 80003ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f0:	fa1f f887 	uxth.w	r8, r7
 80003f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb06 f108 	mul.w	r1, r6, r8
 8000400:	4299      	cmp	r1, r3
 8000402:	fa04 f402 	lsl.w	r4, r4, r2
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x19c>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f106 3cff 	add.w	ip, r6, #4294967295
 800040e:	f080 808d 	bcs.w	800052c <__udivmoddi4+0x2ac>
 8000412:	4299      	cmp	r1, r3
 8000414:	f240 808a 	bls.w	800052c <__udivmoddi4+0x2ac>
 8000418:	3e02      	subs	r6, #2
 800041a:	443b      	add	r3, r7
 800041c:	1a5b      	subs	r3, r3, r1
 800041e:	b281      	uxth	r1, r0
 8000420:	fbb3 f0fe 	udiv	r0, r3, lr
 8000424:	fb0e 3310 	mls	r3, lr, r0, r3
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	fb00 f308 	mul.w	r3, r0, r8
 8000430:	428b      	cmp	r3, r1
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x1c4>
 8000434:	1879      	adds	r1, r7, r1
 8000436:	f100 3cff 	add.w	ip, r0, #4294967295
 800043a:	d273      	bcs.n	8000524 <__udivmoddi4+0x2a4>
 800043c:	428b      	cmp	r3, r1
 800043e:	d971      	bls.n	8000524 <__udivmoddi4+0x2a4>
 8000440:	3802      	subs	r0, #2
 8000442:	4439      	add	r1, r7
 8000444:	1acb      	subs	r3, r1, r3
 8000446:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800044a:	e778      	b.n	800033e <__udivmoddi4+0xbe>
 800044c:	f1c6 0c20 	rsb	ip, r6, #32
 8000450:	fa03 f406 	lsl.w	r4, r3, r6
 8000454:	fa22 f30c 	lsr.w	r3, r2, ip
 8000458:	431c      	orrs	r4, r3
 800045a:	fa20 f70c 	lsr.w	r7, r0, ip
 800045e:	fa01 f306 	lsl.w	r3, r1, r6
 8000462:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000466:	fa21 f10c 	lsr.w	r1, r1, ip
 800046a:	431f      	orrs	r7, r3
 800046c:	0c3b      	lsrs	r3, r7, #16
 800046e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000472:	fa1f f884 	uxth.w	r8, r4
 8000476:	fb0e 1119 	mls	r1, lr, r9, r1
 800047a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800047e:	fb09 fa08 	mul.w	sl, r9, r8
 8000482:	458a      	cmp	sl, r1
 8000484:	fa02 f206 	lsl.w	r2, r2, r6
 8000488:	fa00 f306 	lsl.w	r3, r0, r6
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x220>
 800048e:	1861      	adds	r1, r4, r1
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295
 8000494:	d248      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 8000496:	458a      	cmp	sl, r1
 8000498:	d946      	bls.n	8000528 <__udivmoddi4+0x2a8>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4421      	add	r1, r4
 80004a0:	eba1 010a 	sub.w	r1, r1, sl
 80004a4:	b2bf      	uxth	r7, r7
 80004a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45b8      	cmp	r8, r7
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x24a>
 80004ba:	19e7      	adds	r7, r4, r7
 80004bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c0:	d22e      	bcs.n	8000520 <__udivmoddi4+0x2a0>
 80004c2:	45b8      	cmp	r8, r7
 80004c4:	d92c      	bls.n	8000520 <__udivmoddi4+0x2a0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4427      	add	r7, r4
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba7 0708 	sub.w	r7, r7, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454f      	cmp	r7, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	4649      	mov	r1, r9
 80004dc:	d31a      	bcc.n	8000514 <__udivmoddi4+0x294>
 80004de:	d017      	beq.n	8000510 <__udivmoddi4+0x290>
 80004e0:	b15d      	cbz	r5, 80004fa <__udivmoddi4+0x27a>
 80004e2:	ebb3 020e 	subs.w	r2, r3, lr
 80004e6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	ea4c 0202 	orr.w	r2, ip, r2
 80004f4:	40f7      	lsrs	r7, r6
 80004f6:	e9c5 2700 	strd	r2, r7, [r5]
 80004fa:	2600      	movs	r6, #0
 80004fc:	4631      	mov	r1, r6
 80004fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e70b      	b.n	8000320 <__udivmoddi4+0xa0>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0x60>
 800050c:	4618      	mov	r0, r3
 800050e:	e6fd      	b.n	800030c <__udivmoddi4+0x8c>
 8000510:	4543      	cmp	r3, r8
 8000512:	d2e5      	bcs.n	80004e0 <__udivmoddi4+0x260>
 8000514:	ebb8 0e02 	subs.w	lr, r8, r2
 8000518:	eb69 0104 	sbc.w	r1, r9, r4
 800051c:	3801      	subs	r0, #1
 800051e:	e7df      	b.n	80004e0 <__udivmoddi4+0x260>
 8000520:	4608      	mov	r0, r1
 8000522:	e7d2      	b.n	80004ca <__udivmoddi4+0x24a>
 8000524:	4660      	mov	r0, ip
 8000526:	e78d      	b.n	8000444 <__udivmoddi4+0x1c4>
 8000528:	4681      	mov	r9, r0
 800052a:	e7b9      	b.n	80004a0 <__udivmoddi4+0x220>
 800052c:	4666      	mov	r6, ip
 800052e:	e775      	b.n	800041c <__udivmoddi4+0x19c>
 8000530:	4630      	mov	r0, r6
 8000532:	e74a      	b.n	80003ca <__udivmoddi4+0x14a>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	4439      	add	r1, r7
 800053a:	e713      	b.n	8000364 <__udivmoddi4+0xe4>
 800053c:	3802      	subs	r0, #2
 800053e:	443c      	add	r4, r7
 8000540:	e724      	b.n	800038c <__udivmoddi4+0x10c>
 8000542:	bf00      	nop

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fba9 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f874 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8fe 	bl	8000754 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f8cc 	bl	80006f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f003 fe5e 	bl	800421c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of USARTQueueFirstTask */
  USARTQueueFirstTaskHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &USARTQueueFirstTask_attributes);
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <main+0xa0>)
 8000562:	2105      	movs	r1, #5
 8000564:	200a      	movs	r0, #10
 8000566:	f003 ff97 	bl	8004498 <osMessageQueueNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <main+0xa4>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of USARTQueueSecondTask */
  USARTQueueSecondTaskHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &USARTQueueSecondTask_attributes);
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0xa8>)
 8000572:	2105      	movs	r1, #5
 8000574:	200a      	movs	r0, #10
 8000576:	f003 ff8f 	bl	8004498 <osMessageQueueNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <main+0xac>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of USARTQueueThirdTask */
  USARTQueueThirdTaskHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &USARTQueueThirdTask_attributes);
 8000580:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <main+0xb0>)
 8000582:	2105      	movs	r1, #5
 8000584:	200a      	movs	r0, #10
 8000586:	f003 ff87 	bl	8004498 <osMessageQueueNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <main+0xb4>)
 800058e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <main+0xb8>)
 8000592:	2100      	movs	r1, #0
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <main+0xbc>)
 8000596:	f003 feab 	bl	80042f0 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a1a      	ldr	r2, [pc, #104]	; (8000608 <main+0xc0>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of NothingTask */
  NothingTaskHandle = osThreadNew(StartNothingTask, NULL, &NothingTask_attributes);
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <main+0xc4>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	481a      	ldr	r0, [pc, #104]	; (8000610 <main+0xc8>)
 80005a6:	f003 fea3 	bl	80042f0 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0xcc>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of UpperCaseTask */
  UpperCaseTaskHandle = osThreadNew(StartUpperCaseTask, NULL, &UpperCaseTask_attributes);
 80005b0:	4a19      	ldr	r2, [pc, #100]	; (8000618 <main+0xd0>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0xd4>)
 80005b6:	f003 fe9b 	bl	80042f0 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <main+0xd8>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of LowerCaseTask */
  LowerCaseTaskHandle = osThreadNew(StartLowerCaseTask, NULL, &LowerCaseTask_attributes);
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <main+0xdc>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <main+0xe0>)
 80005c6:	f003 fe93 	bl	80042f0 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <main+0xe4>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveTask */
  ReceiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &ReceiveTask_attributes);
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <main+0xe8>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0xec>)
 80005d6:	f003 fe8b 	bl	80042f0 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <main+0xf0>)
 80005de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f003 fe50 	bl	8004284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x9c>
 80005e6:	bf00      	nop
 80005e8:	08007408 	.word	0x08007408
 80005ec:	20004c54 	.word	0x20004c54
 80005f0:	08007420 	.word	0x08007420
 80005f4:	20004944 	.word	0x20004944
 80005f8:	08007438 	.word	0x08007438
 80005fc:	2000493c 	.word	0x2000493c
 8000600:	08007354 	.word	0x08007354
 8000604:	080007c9 	.word	0x080007c9
 8000608:	20004940 	.word	0x20004940
 800060c:	08007378 	.word	0x08007378
 8000610:	080007d9 	.word	0x080007d9
 8000614:	20004ac0 	.word	0x20004ac0
 8000618:	0800739c 	.word	0x0800739c
 800061c:	08000811 	.word	0x08000811
 8000620:	20004c50 	.word	0x20004c50
 8000624:	080073c0 	.word	0x080073c0
 8000628:	08000849 	.word	0x08000849
 800062c:	20004948 	.word	0x20004948
 8000630:	080073e4 	.word	0x080073e4
 8000634:	08000881 	.word	0x08000881
 8000638:	20004abc 	.word	0x20004abc

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fe18 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xb0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xb0>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xb0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemClock_Config+0xb4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <SystemClock_Config+0xb4>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <SystemClock_Config+0xb4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fe47 	bl	800133c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006b4:	f000 f9a4 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8e0 	bl	8001898 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006de:	f000 f98f 	bl	8000a00 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART3_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_USART3_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USART3_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART3_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART3_UART_Init+0x58>)
 8000738:	f002 f9be 	bl	8002ab8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f95d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000494c 	.word	0x2000494c
 8000750:	40004800 	.word	0x40004800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0x44>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <MX_GPIO_Init+0x44>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_GPIO_Init+0x44>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_GPIO_Init+0x44>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <MX_GPIO_Init+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_GPIO_Init+0x44>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
          if(huart == &huart3)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_UART_RxCpltCallback+0x24>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d102      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x16>
          {
        	  flag = 1;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_UART_RxCpltCallback+0x28>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
          }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000494c 	.word	0x2000494c
 80007c4:	20004a02 	.word	0x20004a02

080007c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f003 fe33 	bl	800443c <osDelay>
 80007d6:	e7fb      	b.n	80007d0 <StartDefaultTask+0x8>

080007d8 <StartNothingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNothingTask */
void StartNothingTask(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNothingTask */
	QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(USARTQueueFirstTaskHandle, &msg, 0, osWaitForever);
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <StartNothingTask+0x30>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2200      	movs	r2, #0
 80007ee:	f003 ff4d 	bl	800468c <osMessageQueueGet>
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg.buf, 4);
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <StartNothingTask+0x34>)
 80007fc:	f002 f9aa 	bl	8002b54 <HAL_UART_Transmit_IT>

	osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f003 fe1b 	bl	800443c <osDelay>
	  osMessageQueueGet(USARTQueueFirstTaskHandle, &msg, 0, osWaitForever);
 8000806:	e7eb      	b.n	80007e0 <StartNothingTask+0x8>
 8000808:	20004c54 	.word	0x20004c54
 800080c:	2000494c 	.word	0x2000494c

08000810 <StartUpperCaseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpperCaseTask */
void StartUpperCaseTask(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpperCaseTask */
	QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(USARTQueueSecondTaskHandle, &msg, 0, osWaitForever);
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <StartUpperCaseTask+0x30>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	f107 0108 	add.w	r1, r7, #8
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2200      	movs	r2, #0
 8000826:	f003 ff31 	bl	800468c <osMessageQueueGet>
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg.buf, 4);
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <StartUpperCaseTask+0x34>)
 8000834:	f002 f98e 	bl	8002b54 <HAL_UART_Transmit_IT>
    osDelay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f003 fdff 	bl	800443c <osDelay>
	  osMessageQueueGet(USARTQueueSecondTaskHandle, &msg, 0, osWaitForever);
 800083e:	e7eb      	b.n	8000818 <StartUpperCaseTask+0x8>
 8000840:	20004944 	.word	0x20004944
 8000844:	2000494c 	.word	0x2000494c

08000848 <StartLowerCaseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowerCaseTask */
void StartLowerCaseTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowerCaseTask */
    QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(USARTQueueThirdTaskHandle, &msg, 0, osWaitForever);
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <StartLowerCaseTask+0x30>)
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	f107 0108 	add.w	r1, r7, #8
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2200      	movs	r2, #0
 800085e:	f003 ff15 	bl	800468c <osMessageQueueGet>
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg.buf, 4);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2204      	movs	r2, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <StartLowerCaseTask+0x34>)
 800086c:	f002 f972 	bl	8002b54 <HAL_UART_Transmit_IT>

	  osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f003 fde3 	bl	800443c <osDelay>
	  osMessageQueueGet(USARTQueueThirdTaskHandle, &msg, 0, osWaitForever);
 8000876:	e7eb      	b.n	8000850 <StartLowerCaseTask+0x8>
 8000878:	2000493c 	.word	0x2000493c
 800087c:	2000494c 	.word	0x2000494c

08000880 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
	QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)buff, 5);
 8000888:	2205      	movs	r2, #5
 800088a:	494d      	ldr	r1, [pc, #308]	; (80009c0 <StartReceiveTask+0x140>)
 800088c:	484d      	ldr	r0, [pc, #308]	; (80009c4 <StartReceiveTask+0x144>)
 800088e:	f002 f9cf 	bl	8002c30 <HAL_UART_Receive_IT>

	  	if (flag)
 8000892:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <StartReceiveTask+0x148>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 808d 	beq.w	80009b6 <StartReceiveTask+0x136>
	  	{
	  		if(buff[0] == '1'){
 800089c:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <StartReceiveTask+0x140>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b31      	cmp	r3, #49	; 0x31
 80008a2:	d110      	bne.n	80008c6 <StartReceiveTask+0x46>
	  		strcpy(msg.buf,buff+1);
 80008a4:	4a49      	ldr	r2, [pc, #292]	; (80009cc <StartReceiveTask+0x14c>)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 fcef 	bl	8007290 <strcpy>
	  		osMessageQueuePut(USARTQueueFirstTaskHandle, &msg, 0, osWaitForever);
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <StartReceiveTask+0x150>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f107 0108 	add.w	r1, r7, #8
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	2200      	movs	r2, #0
 80008c0:	f003 fe70 	bl	80045a4 <osMessageQueuePut>
 80008c4:	e074      	b.n	80009b0 <StartReceiveTask+0x130>
	  		}
	  		else if (buff[0] == '2')
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <StartReceiveTask+0x140>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b32      	cmp	r3, #50	; 0x32
 80008cc:	d134      	bne.n	8000938 <StartReceiveTask+0xb8>
	  		{
	  			for(int i=1; i<strlen(buff); i++)
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e019      	b.n	8000908 <StartReceiveTask+0x88>
			  	  {
				  if(buff[i]>='a' && buff[i]<='z')
 80008d4:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <StartReceiveTask+0x140>)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b60      	cmp	r3, #96	; 0x60
 80008de:	d910      	bls.n	8000902 <StartReceiveTask+0x82>
 80008e0:	4a37      	ldr	r2, [pc, #220]	; (80009c0 <StartReceiveTask+0x140>)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b7a      	cmp	r3, #122	; 0x7a
 80008ea:	d80a      	bhi.n	8000902 <StartReceiveTask+0x82>
					  {
					  buff[i] = buff[i] - 32;
 80008ec:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <StartReceiveTask+0x140>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3b20      	subs	r3, #32
 80008f6:	b2d9      	uxtb	r1, r3
 80008f8:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <StartReceiveTask+0x140>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	460a      	mov	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
	  			for(int i=1; i<strlen(buff); i++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	482d      	ldr	r0, [pc, #180]	; (80009c0 <StartReceiveTask+0x140>)
 800090a:	f7ff fc99 	bl	8000240 <strlen>
 800090e:	4602      	mov	r2, r0
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	429a      	cmp	r2, r3
 8000914:	d8de      	bhi.n	80008d4 <StartReceiveTask+0x54>
					  }
				  }

			strcpy(msg.buf,buff+1);
 8000916:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <StartReceiveTask+0x14c>)
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f006 fcb6 	bl	8007290 <strcpy>
			osMessageQueuePut(USARTQueueSecondTaskHandle, &msg, 0, osWaitForever);
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <StartReceiveTask+0x154>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	f107 0108 	add.w	r1, r7, #8
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	2200      	movs	r2, #0
 8000932:	f003 fe37 	bl	80045a4 <osMessageQueuePut>
 8000936:	e03b      	b.n	80009b0 <StartReceiveTask+0x130>
	  		}
	  		else if (buff[0] == '3')
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <StartReceiveTask+0x140>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b33      	cmp	r3, #51	; 0x33
 800093e:	d137      	bne.n	80009b0 <StartReceiveTask+0x130>
	  		{
	  			for(int i=0; i<strlen(buff+1); i++)
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	e01c      	b.n	8000980 <StartReceiveTask+0x100>
				  {
				  if((buff+1)[i]>='A' && (buff+1)[i]<='Z')
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <StartReceiveTask+0x140>)
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b40      	cmp	r3, #64	; 0x40
 8000952:	d912      	bls.n	800097a <StartReceiveTask+0xfa>
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	3301      	adds	r3, #1
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <StartReceiveTask+0x140>)
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b5a      	cmp	r3, #90	; 0x5a
 8000960:	d80b      	bhi.n	800097a <StartReceiveTask+0xfa>
				  	  {
					  (buff+1)[i] = (buff+1)[i] + 32;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	3301      	adds	r3, #1
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <StartReceiveTask+0x140>)
 8000968:	4413      	add	r3, r2
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	3301      	adds	r3, #1
 8000970:	4913      	ldr	r1, [pc, #76]	; (80009c0 <StartReceiveTask+0x140>)
 8000972:	440b      	add	r3, r1
 8000974:	3220      	adds	r2, #32
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
	  			for(int i=0; i<strlen(buff+1); i++)
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3301      	adds	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <StartReceiveTask+0x14c>)
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc5c 	bl	8000240 <strlen>
 8000988:	4602      	mov	r2, r0
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8da      	bhi.n	8000946 <StartReceiveTask+0xc6>
				  	  }
				  }

			strcpy(msg.buf,buff+1);
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <StartReceiveTask+0x14c>)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f006 fc79 	bl	8007290 <strcpy>
			osMessageQueuePut(USARTQueueThirdTaskHandle, &msg, 0, osWaitForever);
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <StartReceiveTask+0x158>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2200      	movs	r2, #0
 80009ac:	f003 fdfa 	bl	80045a4 <osMessageQueuePut>
	  		}

	  		flag = 0;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <StartReceiveTask+0x148>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	  	}
    osDelay(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f003 fd40 	bl	800443c <osDelay>
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)buff, 5);
 80009bc:	e764      	b.n	8000888 <StartReceiveTask+0x8>
 80009be:	bf00      	nop
 80009c0:	2000002c 	.word	0x2000002c
 80009c4:	2000494c 	.word	0x2000494c
 80009c8:	20004a02 	.word	0x20004a02
 80009cc:	2000002d 	.word	0x2000002d
 80009d0:	20004c54 	.word	0x20004c54
 80009d4:	20004944 	.word	0x20004944
 80009d8:	2000493c 	.word	0x2000493c

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f965 	bl	8000cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40001000 	.word	0x40001000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fa0f 	bl	8000e6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0ae      	sub	sp, #184	; 0xb8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2290      	movs	r2, #144	; 0x90
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f006 fbff 	bl	8007280 <memset>
  if(huart->Instance==USART3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_UART_MspInit+0xc4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d144      	bne.n	8000b16 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f904 	bl	8001ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa6:	f7ff ffab 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0xc8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_UART_MspInit+0xcc>)
 8000b02:	f000 fa6f 	bl	8000fe4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2105      	movs	r1, #5
 8000b0a:	2027      	movs	r0, #39	; 0x27
 8000b0c:	f000 f9ae 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b10:	2027      	movs	r0, #39	; 0x27
 8000b12:	f000 f9c7 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	37b8      	adds	r7, #184	; 0xb8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004800 	.word	0x40004800
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2036      	movs	r0, #54	; 0x36
 8000b42:	f000 f993 	bl	8000e6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b46:	2036      	movs	r0, #54	; 0x36
 8000b48:	f000 f9ac 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f868 	bl	8001c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b74:	f001 f83e 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8000b78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_InitTick+0xa0>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_InitTick+0xa8>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000baa:	f001 fca5 	bl	80024f8 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000bb6:	f001 fd01 	bl	80025bc <HAL_TIM_Base_Start_IT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	200054dc 	.word	0x200054dc
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART3_IRQHandler+0x10>)
 8000c0a:	f002 f85f 	bl	8002ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000494c 	.word	0x2000494c

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f001 fd45 	bl	80026ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200054dc 	.word	0x200054dc

08000c2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f006 facd 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc61 	bl	8000548 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c94:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8000c98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c9c:	2000556c 	.word	0x2000556c

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>

08000ca2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 f8d5 	bl	8000e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cac:	200f      	movs	r0, #15
 8000cae:	f7ff ff3d 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb2:	f7ff feab 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20005528 	.word	0x20005528

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20005528 	.word	0x20005528

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff4c 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7e:	f7ff ff61 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	6978      	ldr	r0, [r7, #20]
 8000e8a:	f7ff ffb1 	bl	8000df0 <NVIC_EncodePriority>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff80 	bl	8000d9c <__NVIC_SetPriority>
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff54 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ece:	f7ff ff09 	bl	8000ce4 <HAL_GetTick>
 8000ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d008      	beq.n	8000ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e052      	b.n	8000f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0216 	bic.w	r2, r2, #22
 8000f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <HAL_DMA_Abort+0x62>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0208 	bic.w	r2, r2, #8
 8000f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f42:	e013      	b.n	8000f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f44:	f7ff fece 	bl	8000ce4 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d90c      	bls.n	8000f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2220      	movs	r2, #32
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e015      	b.n	8000f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e4      	bne.n	8000f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7e:	223f      	movs	r2, #63	; 0x3f
 8000f80:	409a      	lsls	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d004      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00c      	b.n	8000fd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e175      	b.n	80012f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 8164 	bne.w	80012ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_GPIO_Init+0x56>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80be 	beq.w	80012ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b66      	ldr	r3, [pc, #408]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a65      	ldr	r2, [pc, #404]	; (8001308 <HAL_GPIO_Init+0x324>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b63      	ldr	r3, [pc, #396]	; (8001308 <HAL_GPIO_Init+0x324>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001186:	4a61      	ldr	r2, [pc, #388]	; (800130c <HAL_GPIO_Init+0x328>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_GPIO_Init+0x32c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d037      	beq.n	8001222 <HAL_GPIO_Init+0x23e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a57      	ldr	r2, [pc, #348]	; (8001314 <HAL_GPIO_Init+0x330>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d031      	beq.n	800121e <HAL_GPIO_Init+0x23a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x334>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x236>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a55      	ldr	r2, [pc, #340]	; (800131c <HAL_GPIO_Init+0x338>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d025      	beq.n	8001216 <HAL_GPIO_Init+0x232>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <HAL_GPIO_Init+0x33c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_GPIO_Init+0x22e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a53      	ldr	r2, [pc, #332]	; (8001324 <HAL_GPIO_Init+0x340>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x22a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x344>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	; (800132c <HAL_GPIO_Init+0x348>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x34c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x350>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x21a>
 80011fa:	2309      	movs	r3, #9
 80011fc:	e012      	b.n	8001224 <HAL_GPIO_Init+0x240>
 80011fe:	230a      	movs	r3, #10
 8001200:	e010      	b.n	8001224 <HAL_GPIO_Init+0x240>
 8001202:	2308      	movs	r3, #8
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x240>
 8001206:	2307      	movs	r3, #7
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x240>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x240>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x240>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x240>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x240>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x240>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x240>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_GPIO_Init+0x328>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_GPIO_Init+0x354>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a34      	ldr	r2, [pc, #208]	; (8001338 <HAL_GPIO_Init+0x354>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x354>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <HAL_GPIO_Init+0x354>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_GPIO_Init+0x354>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_GPIO_Init+0x354>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x354>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_GPIO_Init+0x354>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae86 	bls.w	8001004 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40022000 	.word	0x40022000
 8001334:	40022400 	.word	0x40022400
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e29b      	b.n	800188a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001360:	4b96      	ldr	r3, [pc, #600]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b04      	cmp	r3, #4
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136c:	4b93      	ldr	r3, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d112      	bne.n	800139e <HAL_RCC_OscConfig+0x62>
 8001378:	4b90      	ldr	r3, [pc, #576]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	4b8d      	ldr	r3, [pc, #564]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d06c      	beq.n	800146c <HAL_RCC_OscConfig+0x130>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d168      	bne.n	800146c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e275      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7a>
 80013a8:	4b84      	ldr	r3, [pc, #528]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a83      	ldr	r2, [pc, #524]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e02e      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x9c>
 80013be:	4b7f      	ldr	r3, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7e      	ldr	r2, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7b      	ldr	r2, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0xc0>
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a72      	ldr	r2, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6b      	ldr	r2, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc62 	bl	8000ce4 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc5e 	bl	8000ce4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e229      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc4e 	bl	8000ce4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc4a 	bl	8000ce4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e215      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x110>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d069      	beq.n	800154e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x190>
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1e9      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	493d      	ldr	r1, [pc, #244]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e040      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a38      	ldr	r2, [pc, #224]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc00 	bl	8000ce4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fbfc 	bl	8000ce4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1c7      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4929      	ldr	r1, [pc, #164]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
 800151a:	e018      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fbdc 	bl	8000ce4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fbd8 	bl	8000ce4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1a3      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d038      	beq.n	80015cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fbb9 	bl	8000ce4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fbb5 	bl	8000ce4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e180      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x23a>
 8001594:	e01a      	b.n	80015cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb9f 	bl	8000ce4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb9b 	bl	8000ce4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d903      	bls.n	80015c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e166      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
 80015bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a4 	beq.w	8001722 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b8c      	ldr	r3, [pc, #560]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a88      	ldr	r2, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b86      	ldr	r3, [pc, #536]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800160e:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7f      	ldr	r2, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb63 	bl	8000ce4 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fb5f 	bl	8000ce4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e12a      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x31a>
 8001648:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a6f      	ldr	r2, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x33c>
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a67      	ldr	r2, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x35e>
 8001680:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb13 	bl	8000ce4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb0f 	bl	8000ce4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0d8      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x386>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fafd 	bl	8000ce4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff faf9 	bl	8000ce4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0c2      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80ae 	beq.w	8001888 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d06d      	beq.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d14b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff faca 	bl	8000ce4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fac6 	bl	8000ce4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e091      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	019b      	lsls	r3, r3, #6
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	071b      	lsls	r3, r3, #28
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa98 	bl	8000ce4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa94 	bl	8000ce4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e05f      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x47c>
 80017d6:	e057      	b.n	8001888 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa7e 	bl	8000ce4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fa7a 	bl	8000ce4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e045      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x4b0>
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x54c>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_RCC_OscConfig+0x558>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d030      	beq.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d129      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d122      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184c:	4293      	cmp	r3, r2
 800184e:	d119      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d10f      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d0      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d910      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 020f 	bic.w	r2, r3, #15
 80018c6:	4965      	ldr	r1, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d040      	beq.n	80019bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e073      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06b      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198c:	f7ff f9aa 	bl	8000ce4 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f9a6 	bl	8000ce4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e053      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d210      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4922      	ldr	r1, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1d4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f86e 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08007450 	.word	0x08007450
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a76:	2100      	movs	r1, #0
 8001a78:	6079      	str	r1, [r7, #4]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	60f9      	str	r1, [r7, #12]
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001a82:	2100      	movs	r1, #0
 8001a84:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a86:	4952      	ldr	r1, [pc, #328]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a88:	6889      	ldr	r1, [r1, #8]
 8001a8a:	f001 010c 	and.w	r1, r1, #12
 8001a8e:	2908      	cmp	r1, #8
 8001a90:	d00d      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3e>
 8001a92:	2908      	cmp	r1, #8
 8001a94:	f200 8094 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32>
 8001a9c:	2904      	cmp	r1, #4
 8001a9e:	d003      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x38>
 8001aa0:	e08e      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001aa4:	60bb      	str	r3, [r7, #8]
      break;
 8001aa6:	e08e      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001aaa:	60bb      	str	r3, [r7, #8]
      break;
 8001aac:	e08b      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aae:	4948      	ldr	r1, [pc, #288]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab0:	6849      	ldr	r1, [r1, #4]
 8001ab2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ab6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ab8:	4945      	ldr	r1, [pc, #276]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aba:	6849      	ldr	r1, [r1, #4]
 8001abc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d024      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4942      	ldr	r1, [pc, #264]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac6:	6849      	ldr	r1, [r1, #4]
 8001ac8:	0989      	lsrs	r1, r1, #6
 8001aca:	4608      	mov	r0, r1
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ad4:	f04f 0500 	mov.w	r5, #0
 8001ad8:	ea00 0204 	and.w	r2, r0, r4
 8001adc:	ea01 0305 	and.w	r3, r1, r5
 8001ae0:	493d      	ldr	r1, [pc, #244]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ae2:	fb01 f003 	mul.w	r0, r1, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	fb01 f102 	mul.w	r1, r1, r2
 8001aec:	1844      	adds	r4, r0, r1
 8001aee:	493a      	ldr	r1, [pc, #232]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001af0:	fba2 0101 	umull	r0, r1, r2, r1
 8001af4:	1863      	adds	r3, r4, r1
 8001af6:	4619      	mov	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f7fe fba6 	bl	8000250 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	461a      	mov	r2, r3
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	ea02 0400 	and.w	r4, r2, r0
 8001b26:	ea03 0501 	and.w	r5, r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	014b      	lsls	r3, r1, #5
 8001b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b3c:	0142      	lsls	r2, r0, #5
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	eb61 0105 	sbc.w	r1, r1, r5
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	018b      	lsls	r3, r1, #6
 8001b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b56:	0182      	lsls	r2, r0, #6
 8001b58:	1a12      	subs	r2, r2, r0
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	00d9      	lsls	r1, r3, #3
 8001b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b6c:	00d0      	lsls	r0, r2, #3
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	1912      	adds	r2, r2, r4
 8001b74:	eb45 0303 	adc.w	r3, r5, r3
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0299      	lsls	r1, r3, #10
 8001b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b86:	0290      	lsls	r0, r2, #10
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f7fe fb5a 	bl	8000250 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001bc2:	60bb      	str	r3, [r7, #8]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	017d7840 	.word	0x017d7840

08001bdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08007460 	.word	0x08007460

08001c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c20:	f7ff ffdc 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0b5b      	lsrs	r3, r3, #13
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08007460 	.word	0x08007460

08001c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	220f      	movs	r2, #15
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCC_GetClockConfig+0x60>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cd0:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a68      	ldr	r2, [pc, #416]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cda:	6093      	str	r3, [r2, #8]
 8001cdc:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	4964      	ldr	r1, [pc, #400]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d017      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	4959      	ldr	r1, [pc, #356]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d017      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	494a      	ldr	r1, [pc, #296]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 808b 	beq.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	; 0x40
 8001d98:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db0:	f7fe ff98 	bl	8000ce4 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db8:	f7fe ff94 	bl	8000ce4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e38f      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d035      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d02e      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d114      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe ff5c 	bl	8000ce4 <HAL_GetTick>
 8001e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7fe ff58 	bl	8000ce4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e351      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0ee      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e6e:	400b      	ands	r3, r1
 8001e70:	4901      	ldr	r1, [pc, #4]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	0ffffcff 	.word	0x0ffffcff
 8001e84:	4bb3      	ldr	r3, [pc, #716]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4ab2      	ldr	r2, [pc, #712]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e8e:	6093      	str	r3, [r2, #8]
 8001e90:	4bb0      	ldr	r3, [pc, #704]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	49ad      	ldr	r1, [pc, #692]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eae:	4ba9      	ldr	r3, [pc, #676]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb4:	4aa7      	ldr	r2, [pc, #668]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ebe:	4ba5      	ldr	r3, [pc, #660]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	49a2      	ldr	r1, [pc, #648]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001edc:	4b9d      	ldr	r3, [pc, #628]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eea:	499a      	ldr	r1, [pc, #616]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001efe:	4b95      	ldr	r3, [pc, #596]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f0c:	4991      	ldr	r1, [pc, #580]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f20:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f2e:	4989      	ldr	r1, [pc, #548]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f42:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4980      	ldr	r1, [pc, #512]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f64:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4978      	ldr	r1, [pc, #480]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f023 020c 	bic.w	r2, r3, #12
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	496f      	ldr	r1, [pc, #444]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4967      	ldr	r1, [pc, #412]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	495e      	ldr	r1, [pc, #376]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	4956      	ldr	r1, [pc, #344]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	4945      	ldr	r1, [pc, #276]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002052:	4b40      	ldr	r3, [pc, #256]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002060:	493c      	ldr	r1, [pc, #240]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002082:	4934      	ldr	r1, [pc, #208]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d011      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020b4:	d101      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e4:	491b      	ldr	r1, [pc, #108]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002108:	4912      	ldr	r1, [pc, #72]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800211c:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800212c:	4909      	ldr	r1, [pc, #36]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00f      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	e002      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	4986      	ldr	r1, [pc, #536]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800216c:	4b81      	ldr	r3, [pc, #516]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002172:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800217c:	497d      	ldr	r1, [pc, #500]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d006      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80d6 	beq.w	8002344 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002198:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7fe fd9e 	bl	8000ce4 <HAL_GetTick>
 80021a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ac:	f7fe fd9a 	bl	8000ce4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e195      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d021      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11d      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021de:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f2:	0e1b      	lsrs	r3, r3, #24
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	019a      	lsls	r2, r3, #6
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	431a      	orrs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	071b      	lsls	r3, r3, #28
 8002212:	4958      	ldr	r1, [pc, #352]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02e      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002244:	d129      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002246:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002254:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225a:	0f1b      	lsrs	r3, r3, #28
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	019a      	lsls	r2, r3, #6
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	493e      	ldr	r1, [pc, #248]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002288:	f023 021f 	bic.w	r2, r3, #31
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	3b01      	subs	r3, #1
 8002292:	4938      	ldr	r1, [pc, #224]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01d      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ac:	0e1b      	lsrs	r3, r3, #24
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ba:	0f1b      	lsrs	r3, r3, #28
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	019a      	lsls	r2, r3, #6
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	071b      	lsls	r3, r3, #28
 80022da:	4926      	ldr	r1, [pc, #152]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d011      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	019a      	lsls	r2, r3, #6
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800231c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231e:	f7fe fce1 	bl	8000ce4 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002326:	f7fe fcdd 	bl	8000ce4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b64      	cmp	r3, #100	; 0x64
 8002332:	d901      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0d8      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 80ce 	bne.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002358:	f7fe fcc4 	bl	8000ce4 <HAL_GetTick>
 800235c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800235e:	e00b      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002360:	f7fe fcc0 	bl	8000ce4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d904      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0bb      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002378:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002384:	d0ec      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02e      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d12a      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023ae:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	0f1b      	lsrs	r3, r3, #28
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	019a      	lsls	r2, r3, #6
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	071b      	lsls	r3, r3, #28
 80023e2:	4944      	ldr	r1, [pc, #272]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023ea:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	493d      	ldr	r1, [pc, #244]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d022      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002418:	d11d      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	0e1b      	lsrs	r3, r3, #24
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002428:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	0f1b      	lsrs	r3, r3, #28
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	019a      	lsls	r2, r3, #6
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	071b      	lsls	r3, r3, #28
 800244e:	4929      	ldr	r1, [pc, #164]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d028      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	0e1b      	lsrs	r3, r3, #24
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	019a      	lsls	r2, r3, #6
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431a      	orrs	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	071b      	lsls	r3, r3, #28
 8002496:	4917      	ldr	r1, [pc, #92]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	4911      	ldr	r1, [pc, #68]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe fc10 	bl	8000ce4 <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024c8:	f7fe fc0c 	bl	8000ce4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e007      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e6:	d1ef      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e049      	b.n	800259e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f841 	bl	80025a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 fa00 	bl	800293c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e054      	b.n	800267e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_TIM_Base_Start_IT+0xd0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d01d      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_TIM_Base_Start_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_TIM_Base_Start_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_TIM_Base_Start_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_TIM_Base_Start_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d115      	bne.n	8002668 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_TIM_Base_Start_IT+0xec>)
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d015      	beq.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d011      	beq.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002666:	e008      	b.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e000      	b.n	800267c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40010400 	.word	0x40010400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40001800 	.word	0x40001800
 80026a8:	00010007 	.word	0x00010007

080026ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0202 	mvn.w	r2, #2
 80026d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f905 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8f7 	bl	80028ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f908 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0204 	mvn.w	r2, #4
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8db 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8cd 	bl	80028ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f8de 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b08      	cmp	r3, #8
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0208 	mvn.w	r2, #8
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2204      	movs	r2, #4
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8b1 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8a3 	bl	80028ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8b4 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d122      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2208      	movs	r2, #8
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f887 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f879 	bl	80028ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f88a 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0201 	mvn.w	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f8d6 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f91a 	bl	8002a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	d10e      	bne.n	800288a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d107      	bne.n	800288a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f90d 	bl	8002aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d10e      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f838 	bl	8002926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d10e      	bne.n	80028e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0220 	mvn.w	r2, #32
 80028da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8cd 	bl	8002a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d00f      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <TIM_Base_SetConfig+0x118>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <TIM_Base_SetConfig+0x11c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <TIM_Base_SetConfig+0x120>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d027      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <TIM_Base_SetConfig+0x118>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d023      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <TIM_Base_SetConfig+0x11c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <TIM_Base_SetConfig+0x120>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d017      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <TIM_Base_SetConfig+0x128>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <TIM_Base_SetConfig+0x12c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00f      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <TIM_Base_SetConfig+0x130>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <TIM_Base_SetConfig+0x134>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <TIM_Base_SetConfig+0x138>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <TIM_Base_SetConfig+0x13c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0xf8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	40014800 	.word	0x40014800
 8002a70:	40001800 	.word	0x40001800
 8002a74:	40001c00 	.word	0x40001c00
 8002a78:	40002000 	.word	0x40002000

08002a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e040      	b.n	8002b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd ffbe 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fbf2 	bl	80032e0 <UART_SetConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e022      	b.n	8002b4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fe48 	bl	80037a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fecf 	bl	80038e8 <UART_CheckIdleState>
 8002b4a:	4603      	mov	r3, r0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b08b      	sub	sp, #44	; 0x2c
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d156      	bne.n	8002c18 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_UART_Transmit_IT+0x22>
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e04f      	b.n	8002c1a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_UART_Transmit_IT+0x34>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e048      	b.n	8002c1a <HAL_UART_Transmit_IT+0xc6>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	d107      	bne.n	8002bd4 <HAL_UART_Transmit_IT+0x80>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_UART_Transmit_IT+0xd4>)
 8002bd0:	669a      	str	r2, [r3, #104]	; 0x68
 8002bd2:	e002      	b.n	8002bda <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_UART_Transmit_IT+0xd8>)
 8002bd8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	69f9      	ldr	r1, [r7, #28]
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e6      	bne.n	8002be2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	372c      	adds	r7, #44	; 0x2c
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	08003e41 	.word	0x08003e41
 8002c2c:	08003d8b 	.word	0x08003d8b

08002c30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d13d      	bne.n	8002cc2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_UART_Receive_IT+0x22>
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e036      	b.n	8002cc4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Receive_IT+0x34>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e02f      	b.n	8002cc4 <HAL_UART_Receive_IT+0x94>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	69f9      	ldr	r1, [r7, #28]
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e6      	bne.n	8002c80 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 ff23 	bl	8003b04 <UART_Start_Receive_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e000      	b.n	8002cc4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	; 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d115      	bne.n	8002d34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00f      	beq.n	8002d34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 82a4 	beq.w	8003272 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
      }
      return;
 8002d32:	e29e      	b.n	8003272 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8117 	beq.w	8002f6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <HAL_UART_IRQHandler+0x298>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 810a 	beq.w	8002f6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <HAL_UART_IRQHandler+0xbc>
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
 8002d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2202      	movs	r2, #2
 8002da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d011      	beq.n	8002de8 <HAL_UART_IRQHandler+0x11c>
 8002dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <HAL_UART_IRQHandler+0x18a>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 820a 	beq.w	8003276 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04f      	beq.n	8002f4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fef2 	bl	8003c98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d141      	bne.n	8002f46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002efa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1d9      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d013      	beq.n	8002f3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_UART_IRQHandler+0x29c>)
 8002f1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f83c 	bl	8000fa0 <HAL_DMA_Abort_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d017      	beq.n	8002f5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e00f      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9ae 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	e00b      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9aa 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9a6 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002f5c:	e18b      	b.n	8003276 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5e:	bf00      	nop
    return;
 8002f60:	e189      	b.n	8003276 <HAL_UART_IRQHandler+0x5aa>
 8002f62:	bf00      	nop
 8002f64:	04000120 	.word	0x04000120
 8002f68:	08003d5f 	.word	0x08003d5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8144 	bne.w	80031fe <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 813d 	beq.w	80031fe <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8136 	beq.w	80031fe <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	f040 80b2 	bne.w	800310e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 815d 	beq.w	800327a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f080 8155 	bcs.w	800327a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	f000 8085 	beq.w	80030f2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003016:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800301e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1da      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3308      	adds	r3, #8
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003056:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800305a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800305e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e1      	bne.n	8003032 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3308      	adds	r3, #8
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003092:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003094:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e3      	bne.n	800306e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e4      	bne.n	80030b2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fee7 	bl	8000ec0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8d4 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800310c:	e0b5      	b.n	800327a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800311a:	b29b      	uxth	r3, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a7 	beq.w	800327e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a2 	beq.w	800327e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800315c:	647b      	str	r3, [r7, #68]	; 0x44
 800315e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800316a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e4      	bne.n	800313a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3308      	adds	r3, #8
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	623b      	str	r3, [r7, #32]
   return(result);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003194:	633a      	str	r2, [r7, #48]	; 0x30
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e3      	bne.n	8003170 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0310 	bic.w	r3, r3, #16
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e4      	bne.n	80031ba <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f85c 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fc:	e03f      	b.n	800327e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <HAL_UART_IRQHandler+0x55c>
 800320a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800321e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f853 	bl	80032cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003226:	e02d      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
    }
    return;
 8003250:	e017      	b.n	8003282 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <HAL_UART_IRQHandler+0x5b8>
 800325e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fe48 	bl	8003f00 <UART_EndTransmit_IT>
    return;
 8003270:	e008      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003272:	bf00      	nop
 8003274:	e006      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
      return;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
      return;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003282:	bf00      	nop
  }

}
 8003284:	37e8      	adds	r7, #232	; 0xe8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4ba7      	ldr	r3, [pc, #668]	; (80035a8 <UART_SetConfig+0x2c8>)
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	6979      	ldr	r1, [r7, #20]
 8003314:	430b      	orrs	r3, r1
 8003316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a95      	ldr	r2, [pc, #596]	; (80035ac <UART_SetConfig+0x2cc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d120      	bne.n	800339e <UART_SetConfig+0xbe>
 800335c:	4b94      	ldr	r3, [pc, #592]	; (80035b0 <UART_SetConfig+0x2d0>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d816      	bhi.n	8003398 <UART_SetConfig+0xb8>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0x90>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	0800338d 	.word	0x0800338d
 8003378:	08003387 	.word	0x08003387
 800337c:	08003393 	.word	0x08003393
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e14f      	b.n	8003626 <UART_SetConfig+0x346>
 8003386:	2302      	movs	r3, #2
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e14c      	b.n	8003626 <UART_SetConfig+0x346>
 800338c:	2304      	movs	r3, #4
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e149      	b.n	8003626 <UART_SetConfig+0x346>
 8003392:	2308      	movs	r3, #8
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e146      	b.n	8003626 <UART_SetConfig+0x346>
 8003398:	2310      	movs	r3, #16
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e143      	b.n	8003626 <UART_SetConfig+0x346>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a84      	ldr	r2, [pc, #528]	; (80035b4 <UART_SetConfig+0x2d4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d132      	bne.n	800340e <UART_SetConfig+0x12e>
 80033a8:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <UART_SetConfig+0x2d0>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d828      	bhi.n	8003408 <UART_SetConfig+0x128>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0xdc>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	08003409 	.word	0x08003409
 80033c4:	08003409 	.word	0x08003409
 80033c8:	08003409 	.word	0x08003409
 80033cc:	080033fd 	.word	0x080033fd
 80033d0:	08003409 	.word	0x08003409
 80033d4:	08003409 	.word	0x08003409
 80033d8:	08003409 	.word	0x08003409
 80033dc:	080033f7 	.word	0x080033f7
 80033e0:	08003409 	.word	0x08003409
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003409 	.word	0x08003409
 80033ec:	08003403 	.word	0x08003403
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e117      	b.n	8003626 <UART_SetConfig+0x346>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e114      	b.n	8003626 <UART_SetConfig+0x346>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e111      	b.n	8003626 <UART_SetConfig+0x346>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e10e      	b.n	8003626 <UART_SetConfig+0x346>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e10b      	b.n	8003626 <UART_SetConfig+0x346>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <UART_SetConfig+0x2d8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d120      	bne.n	800345a <UART_SetConfig+0x17a>
 8003418:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <UART_SetConfig+0x2d0>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003422:	2b30      	cmp	r3, #48	; 0x30
 8003424:	d013      	beq.n	800344e <UART_SetConfig+0x16e>
 8003426:	2b30      	cmp	r3, #48	; 0x30
 8003428:	d814      	bhi.n	8003454 <UART_SetConfig+0x174>
 800342a:	2b20      	cmp	r3, #32
 800342c:	d009      	beq.n	8003442 <UART_SetConfig+0x162>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d810      	bhi.n	8003454 <UART_SetConfig+0x174>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <UART_SetConfig+0x15c>
 8003436:	2b10      	cmp	r3, #16
 8003438:	d006      	beq.n	8003448 <UART_SetConfig+0x168>
 800343a:	e00b      	b.n	8003454 <UART_SetConfig+0x174>
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e0f1      	b.n	8003626 <UART_SetConfig+0x346>
 8003442:	2302      	movs	r3, #2
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e0ee      	b.n	8003626 <UART_SetConfig+0x346>
 8003448:	2304      	movs	r3, #4
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e0eb      	b.n	8003626 <UART_SetConfig+0x346>
 800344e:	2308      	movs	r3, #8
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e0e8      	b.n	8003626 <UART_SetConfig+0x346>
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e0e5      	b.n	8003626 <UART_SetConfig+0x346>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a57      	ldr	r2, [pc, #348]	; (80035bc <UART_SetConfig+0x2dc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d120      	bne.n	80034a6 <UART_SetConfig+0x1c6>
 8003464:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <UART_SetConfig+0x2d0>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800346e:	2bc0      	cmp	r3, #192	; 0xc0
 8003470:	d013      	beq.n	800349a <UART_SetConfig+0x1ba>
 8003472:	2bc0      	cmp	r3, #192	; 0xc0
 8003474:	d814      	bhi.n	80034a0 <UART_SetConfig+0x1c0>
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d009      	beq.n	800348e <UART_SetConfig+0x1ae>
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d810      	bhi.n	80034a0 <UART_SetConfig+0x1c0>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <UART_SetConfig+0x1a8>
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d006      	beq.n	8003494 <UART_SetConfig+0x1b4>
 8003486:	e00b      	b.n	80034a0 <UART_SetConfig+0x1c0>
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e0cb      	b.n	8003626 <UART_SetConfig+0x346>
 800348e:	2302      	movs	r3, #2
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e0c8      	b.n	8003626 <UART_SetConfig+0x346>
 8003494:	2304      	movs	r3, #4
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e0c5      	b.n	8003626 <UART_SetConfig+0x346>
 800349a:	2308      	movs	r3, #8
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e0c2      	b.n	8003626 <UART_SetConfig+0x346>
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e0bf      	b.n	8003626 <UART_SetConfig+0x346>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <UART_SetConfig+0x2e0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d125      	bne.n	80034fc <UART_SetConfig+0x21c>
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <UART_SetConfig+0x2d0>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034be:	d017      	beq.n	80034f0 <UART_SetConfig+0x210>
 80034c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c4:	d817      	bhi.n	80034f6 <UART_SetConfig+0x216>
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ca:	d00b      	beq.n	80034e4 <UART_SetConfig+0x204>
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d811      	bhi.n	80034f6 <UART_SetConfig+0x216>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <UART_SetConfig+0x1fe>
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034da:	d006      	beq.n	80034ea <UART_SetConfig+0x20a>
 80034dc:	e00b      	b.n	80034f6 <UART_SetConfig+0x216>
 80034de:	2300      	movs	r3, #0
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e0a0      	b.n	8003626 <UART_SetConfig+0x346>
 80034e4:	2302      	movs	r3, #2
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e09d      	b.n	8003626 <UART_SetConfig+0x346>
 80034ea:	2304      	movs	r3, #4
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e09a      	b.n	8003626 <UART_SetConfig+0x346>
 80034f0:	2308      	movs	r3, #8
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e097      	b.n	8003626 <UART_SetConfig+0x346>
 80034f6:	2310      	movs	r3, #16
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e094      	b.n	8003626 <UART_SetConfig+0x346>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <UART_SetConfig+0x2e4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d125      	bne.n	8003552 <UART_SetConfig+0x272>
 8003506:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <UART_SetConfig+0x2d0>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003514:	d017      	beq.n	8003546 <UART_SetConfig+0x266>
 8003516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800351a:	d817      	bhi.n	800354c <UART_SetConfig+0x26c>
 800351c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003520:	d00b      	beq.n	800353a <UART_SetConfig+0x25a>
 8003522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003526:	d811      	bhi.n	800354c <UART_SetConfig+0x26c>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <UART_SetConfig+0x254>
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d006      	beq.n	8003540 <UART_SetConfig+0x260>
 8003532:	e00b      	b.n	800354c <UART_SetConfig+0x26c>
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e075      	b.n	8003626 <UART_SetConfig+0x346>
 800353a:	2302      	movs	r3, #2
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e072      	b.n	8003626 <UART_SetConfig+0x346>
 8003540:	2304      	movs	r3, #4
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e06f      	b.n	8003626 <UART_SetConfig+0x346>
 8003546:	2308      	movs	r3, #8
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e06c      	b.n	8003626 <UART_SetConfig+0x346>
 800354c:	2310      	movs	r3, #16
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e069      	b.n	8003626 <UART_SetConfig+0x346>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <UART_SetConfig+0x2e8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d137      	bne.n	80035cc <UART_SetConfig+0x2ec>
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <UART_SetConfig+0x2d0>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003566:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800356a:	d017      	beq.n	800359c <UART_SetConfig+0x2bc>
 800356c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003570:	d817      	bhi.n	80035a2 <UART_SetConfig+0x2c2>
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003576:	d00b      	beq.n	8003590 <UART_SetConfig+0x2b0>
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d811      	bhi.n	80035a2 <UART_SetConfig+0x2c2>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <UART_SetConfig+0x2aa>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d006      	beq.n	8003596 <UART_SetConfig+0x2b6>
 8003588:	e00b      	b.n	80035a2 <UART_SetConfig+0x2c2>
 800358a:	2300      	movs	r3, #0
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e04a      	b.n	8003626 <UART_SetConfig+0x346>
 8003590:	2302      	movs	r3, #2
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e047      	b.n	8003626 <UART_SetConfig+0x346>
 8003596:	2304      	movs	r3, #4
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e044      	b.n	8003626 <UART_SetConfig+0x346>
 800359c:	2308      	movs	r3, #8
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e041      	b.n	8003626 <UART_SetConfig+0x346>
 80035a2:	2310      	movs	r3, #16
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e03e      	b.n	8003626 <UART_SetConfig+0x346>
 80035a8:	efff69f3 	.word	0xefff69f3
 80035ac:	40011000 	.word	0x40011000
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40004400 	.word	0x40004400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	40004c00 	.word	0x40004c00
 80035c0:	40005000 	.word	0x40005000
 80035c4:	40011400 	.word	0x40011400
 80035c8:	40007800 	.word	0x40007800
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a71      	ldr	r2, [pc, #452]	; (8003798 <UART_SetConfig+0x4b8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d125      	bne.n	8003622 <UART_SetConfig+0x342>
 80035d6:	4b71      	ldr	r3, [pc, #452]	; (800379c <UART_SetConfig+0x4bc>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035e4:	d017      	beq.n	8003616 <UART_SetConfig+0x336>
 80035e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035ea:	d817      	bhi.n	800361c <UART_SetConfig+0x33c>
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d00b      	beq.n	800360a <UART_SetConfig+0x32a>
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d811      	bhi.n	800361c <UART_SetConfig+0x33c>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <UART_SetConfig+0x324>
 80035fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003600:	d006      	beq.n	8003610 <UART_SetConfig+0x330>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x33c>
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e00d      	b.n	8003626 <UART_SetConfig+0x346>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e00a      	b.n	8003626 <UART_SetConfig+0x346>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e007      	b.n	8003626 <UART_SetConfig+0x346>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e004      	b.n	8003626 <UART_SetConfig+0x346>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e001      	b.n	8003626 <UART_SetConfig+0x346>
 8003622:	2310      	movs	r3, #16
 8003624:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362e:	d15a      	bne.n	80036e6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003630:	7ffb      	ldrb	r3, [r7, #31]
 8003632:	2b08      	cmp	r3, #8
 8003634:	d827      	bhi.n	8003686 <UART_SetConfig+0x3a6>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <UART_SetConfig+0x35c>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	08003661 	.word	0x08003661
 8003640:	08003669 	.word	0x08003669
 8003644:	08003671 	.word	0x08003671
 8003648:	08003687 	.word	0x08003687
 800364c:	08003677 	.word	0x08003677
 8003650:	08003687 	.word	0x08003687
 8003654:	08003687 	.word	0x08003687
 8003658:	08003687 	.word	0x08003687
 800365c:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003660:	f7fe fac8 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8003664:	61b8      	str	r0, [r7, #24]
        break;
 8003666:	e013      	b.n	8003690 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003668:	f7fe fad8 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 800366c:	61b8      	str	r0, [r7, #24]
        break;
 800366e:	e00f      	b.n	8003690 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <UART_SetConfig+0x4c0>)
 8003672:	61bb      	str	r3, [r7, #24]
        break;
 8003674:	e00c      	b.n	8003690 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7fe f9fb 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 800367a:	61b8      	str	r0, [r7, #24]
        break;
 800367c:	e008      	b.n	8003690 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	61bb      	str	r3, [r7, #24]
        break;
 8003684:	e004      	b.n	8003690 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	77bb      	strb	r3, [r7, #30]
        break;
 800368e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d074      	beq.n	8003780 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	005a      	lsls	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	441a      	add	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d916      	bls.n	80036e0 <UART_SetConfig+0x400>
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d212      	bcs.n	80036e0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f023 030f 	bic.w	r3, r3, #15
 80036c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	89fa      	ldrh	r2, [r7, #14]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e04f      	b.n	8003780 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77bb      	strb	r3, [r7, #30]
 80036e4:	e04c      	b.n	8003780 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d828      	bhi.n	800373e <UART_SetConfig+0x45e>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0x414>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003719 	.word	0x08003719
 80036f8:	08003721 	.word	0x08003721
 80036fc:	08003729 	.word	0x08003729
 8003700:	0800373f 	.word	0x0800373f
 8003704:	0800372f 	.word	0x0800372f
 8003708:	0800373f 	.word	0x0800373f
 800370c:	0800373f 	.word	0x0800373f
 8003710:	0800373f 	.word	0x0800373f
 8003714:	08003737 	.word	0x08003737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7fe fa6c 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 800371c:	61b8      	str	r0, [r7, #24]
        break;
 800371e:	e013      	b.n	8003748 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe fa7c 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e00f      	b.n	8003748 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <UART_SetConfig+0x4c0>)
 800372a:	61bb      	str	r3, [r7, #24]
        break;
 800372c:	e00c      	b.n	8003748 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372e:	f7fe f99f 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8003732:	61b8      	str	r0, [r7, #24]
        break;
 8003734:	e008      	b.n	8003748 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e004      	b.n	8003748 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77bb      	strb	r3, [r7, #30]
        break;
 8003746:	bf00      	nop
    }

    if (pclk != 0U)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	085a      	lsrs	r2, r3, #1
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d909      	bls.n	800377c <UART_SetConfig+0x49c>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d205      	bcs.n	800377c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	e001      	b.n	8003780 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800378c:	7fbb      	ldrb	r3, [r7, #30]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40007c00 	.word	0x40007c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01a      	beq.n	80038ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a2:	d10a      	bne.n	80038ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038f8:	f7fd f9f4 	bl	8000ce4 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d10e      	bne.n	800392a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f82d 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e023      	b.n	8003972 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d10e      	bne.n	8003956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f817 	bl	800397a <UART_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e00d      	b.n	8003972 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b09c      	sub	sp, #112	; 0x70
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	e0a5      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	f000 80a1 	beq.w	8003ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7fd f9a5 	bl	8000ce4 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <UART_WaitOnFlagUntilTimeout+0x32>
 80039a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13e      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c0:	667b      	str	r3, [r7, #100]	; 0x64
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e067      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d04f      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a46:	d147      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
 8003a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3308      	adds	r3, #8
 8003a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aa4:	623a      	str	r2, [r7, #32]
 8003aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69f9      	ldr	r1, [r7, #28]
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e010      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	f43f af4a 	beq.w	800398c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3770      	adds	r7, #112	; 0x70
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b097      	sub	sp, #92	; 0x5c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d10e      	bne.n	8003b56 <UART_Start_Receive_IT+0x52>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <UART_Start_Receive_IT+0x48>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b4a:	e02d      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	22ff      	movs	r2, #255	; 0xff
 8003b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b54:	e028      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <UART_Start_Receive_IT+0x76>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <UART_Start_Receive_IT+0x6c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b6e:	e01b      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	227f      	movs	r2, #127	; 0x7f
 8003b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b78:	e016      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b82:	d10d      	bne.n	8003ba0 <UART_Start_Receive_IT+0x9c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <UART_Start_Receive_IT+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	227f      	movs	r2, #127	; 0x7f
 8003b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b94:	e008      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9e:	e003      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2222      	movs	r2, #34	; 0x22
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	d107      	bne.n	8003c04 <UART_Start_Receive_IT+0x100>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <UART_Start_Receive_IT+0x18c>)
 8003c00:	665a      	str	r2, [r3, #100]	; 0x64
 8003c02:	e002      	b.n	8003c0a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <UART_Start_Receive_IT+0x190>)
 8003c08:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_Start_Receive_IT+0x116>
 8003c4c:	e018      	b.n	8003c80 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f043 0320 	orr.w	r3, r3, #32
 8003c62:	653b      	str	r3, [r7, #80]	; 0x50
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	69f9      	ldr	r1, [r7, #28]
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	375c      	adds	r7, #92	; 0x5c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	080040b1 	.word	0x080040b1
 8003c94:	08003f55 	.word	0x08003f55

08003c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b095      	sub	sp, #84	; 0x54
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e6      	bne.n	8003ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d118      	bne.n	8003d40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0310 	bic.w	r3, r3, #16
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e6      	bne.n	8003d0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d52:	bf00      	nop
 8003d54:	3754      	adds	r7, #84	; 0x54
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff fa8f 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b08f      	sub	sp, #60	; 0x3c
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d96:	2b21      	cmp	r3, #33	; 0x21
 8003d98:	d14c      	bne.n	8003e34 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d132      	bne.n	8003e0c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e6      	bne.n	8003da6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	613b      	str	r3, [r7, #16]
   return(result);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e6      	bne.n	8003dd8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e0a:	e013      	b.n	8003e34 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003e34:	bf00      	nop
 8003e36:	373c      	adds	r7, #60	; 0x3c
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b091      	sub	sp, #68	; 0x44
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4c:	2b21      	cmp	r3, #33	; 0x21
 8003e4e:	d151      	bne.n	8003ef4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d132      	bne.n	8003ec2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e6      	bne.n	8003e5c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e6      	bne.n	8003e8e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003ec0:	e018      	b.n	8003ef4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	1c9a      	adds	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ef4:	bf00      	nop
 8003ef6:	3744      	adds	r7, #68	; 0x44
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	613b      	str	r3, [r7, #16]
   return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff f9a0 	bl	800328c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4c:	bf00      	nop
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b096      	sub	sp, #88	; 0x58
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	f040 8094 	bne.w	8004098 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f7e:	b2d9      	uxtb	r1, r3
 8003f80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d177      	bne.n	80040a8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400a:	633a      	str	r2, [r7, #48]	; 0x30
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	2b01      	cmp	r3, #1
 8004030:	d12e      	bne.n	8004090 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	60fb      	str	r3, [r7, #12]
   return(result);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f023 0310 	bic.w	r3, r3, #16
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	69b9      	ldr	r1, [r7, #24]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	617b      	str	r3, [r7, #20]
   return(result);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d103      	bne.n	8004080 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff f913 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800408e:	e00b      	b.n	80040a8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fc fb83 	bl	800079c <HAL_UART_RxCpltCallback>
}
 8004096:	e007      	b.n	80040a8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	619a      	str	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	3758      	adds	r7, #88	; 0x58
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b096      	sub	sp, #88	; 0x58
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c6:	2b22      	cmp	r3, #34	; 0x22
 80040c8:	f040 8094 	bne.w	80041f4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80040dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80040e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040e4:	4013      	ands	r3, r2
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d177      	bne.n	8004204 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004132:	643b      	str	r3, [r7, #64]	; 0x40
 8004134:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e6      	bne.n	8004114 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	61fb      	str	r3, [r7, #28]
   return(result);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	64bb      	str	r3, [r7, #72]	; 0x48
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800416c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e5      	bne.n	8004146 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	2b01      	cmp	r3, #1
 800418c:	d12e      	bne.n	80041ec <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f023 0310 	bic.w	r3, r3, #16
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e6      	bne.n	8004194 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d103      	bne.n	80041dc <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2210      	movs	r2, #16
 80041da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff f865 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ea:	e00b      	b.n	8004204 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fc fad5 	bl	800079c <HAL_UART_RxCpltCallback>
}
 80041f2:	e007      	b.n	8004204 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	619a      	str	r2, [r3, #24]
}
 8004204:	bf00      	nop
 8004206:	3758      	adds	r7, #88	; 0x58
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004222:	f3ef 8305 	mrs	r3, IPSR
 8004226:	60bb      	str	r3, [r7, #8]
  return(result);
 8004228:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8310 	mrs	r3, PRIMASK
 8004232:	607b      	str	r3, [r7, #4]
  return(result);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800423a:	f3ef 8311 	mrs	r3, BASEPRI
 800423e:	603b      	str	r3, [r7, #0]
  return(result);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <osKernelInitialize+0x3a>
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <osKernelInitialize+0x64>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d103      	bne.n	8004256 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800424e:	f06f 0305 	mvn.w	r3, #5
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e00c      	b.n	8004270 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <osKernelInitialize+0x64>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <osKernelInitialize+0x64>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e002      	b.n	8004270 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000034 	.word	0x20000034

08004284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800428a:	f3ef 8305 	mrs	r3, IPSR
 800428e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004290:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004296:	f3ef 8310 	mrs	r3, PRIMASK
 800429a:	607b      	str	r3, [r7, #4]
  return(result);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042a2:	f3ef 8311 	mrs	r3, BASEPRI
 80042a6:	603b      	str	r3, [r7, #0]
  return(result);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <osKernelStart+0x3a>
 80042ae:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <osKernelStart+0x68>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d103      	bne.n	80042be <osKernelStart+0x3a>
    stat = osErrorISR;
 80042b6:	f06f 0305 	mvn.w	r3, #5
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e010      	b.n	80042e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <osKernelStart+0x68>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d109      	bne.n	80042da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042c6:	f7ff ffa1 	bl	800420c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <osKernelStart+0x68>)
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042d0:	f001 fae8 	bl	80058a4 <vTaskStartScheduler>
      stat = osOK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e002      	b.n	80042e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000034 	.word	0x20000034

080042f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b090      	sub	sp, #64	; 0x40
 80042f4:	af04      	add	r7, sp, #16
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004300:	f3ef 8305 	mrs	r3, IPSR
 8004304:	61fb      	str	r3, [r7, #28]
  return(result);
 8004306:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 808f 	bne.w	800442c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	61bb      	str	r3, [r7, #24]
  return(result);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431a:	f3ef 8311 	mrs	r3, BASEPRI
 800431e:	617b      	str	r3, [r7, #20]
  return(result);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <osThreadNew+0x3e>
 8004326:	4b44      	ldr	r3, [pc, #272]	; (8004438 <osThreadNew+0x148>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d07e      	beq.n	800442c <osThreadNew+0x13c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d07b      	beq.n	800442c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004338:	2318      	movs	r3, #24
 800433a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d045      	beq.n	80043d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <osThreadNew+0x6a>
        name = attr->name;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <osThreadNew+0x90>
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b38      	cmp	r3, #56	; 0x38
 8004372:	d805      	bhi.n	8004380 <osThreadNew+0x90>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <osThreadNew+0x94>
        return (NULL);
 8004380:	2300      	movs	r3, #0
 8004382:	e054      	b.n	800442e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <osThreadNew+0xca>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b5b      	cmp	r3, #91	; 0x5b
 80043a2:	d90a      	bls.n	80043ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <osThreadNew+0xca>
        mem = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	e010      	b.n	80043dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <osThreadNew+0xec>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <osThreadNew+0xec>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <osThreadNew+0xec>
          mem = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
 80043d6:	e001      	b.n	80043dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d110      	bne.n	8004404 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043ea:	9202      	str	r2, [sp, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f001 f873 	bl	80054e4 <xTaskCreateStatic>
 80043fe:	4603      	mov	r3, r0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e013      	b.n	800442c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	b29a      	uxth	r2, r3
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 f8c4 	bl	80055aa <xTaskCreate>
 8004422:	4603      	mov	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <osThreadNew+0x13c>
          hTask = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800442c:	693b      	ldr	r3, [r7, #16]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3730      	adds	r7, #48	; 0x30
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000034 	.word	0x20000034

0800443c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004444:	f3ef 8305 	mrs	r3, IPSR
 8004448:	613b      	str	r3, [r7, #16]
  return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004450:	f3ef 8310 	mrs	r3, PRIMASK
 8004454:	60fb      	str	r3, [r7, #12]
  return(result);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800445c:	f3ef 8311 	mrs	r3, BASEPRI
 8004460:	60bb      	str	r3, [r7, #8]
  return(result);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <osDelay+0x3c>
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <osDelay+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d103      	bne.n	8004478 <osDelay+0x3c>
    stat = osErrorISR;
 8004470:	f06f 0305 	mvn.w	r3, #5
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e007      	b.n	8004488 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f001 f9d8 	bl	8005838 <vTaskDelay>
    }
  }

  return (stat);
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000034 	.word	0x20000034

08004498 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a8:	f3ef 8305 	mrs	r3, IPSR
 80044ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d16f      	bne.n	8004594 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	617b      	str	r3, [r7, #20]
  return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	613b      	str	r3, [r7, #16]
  return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <osMessageQueueNew+0x3c>
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <osMessageQueueNew+0x108>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d05f      	beq.n	8004594 <osMessageQueueNew+0xfc>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d05c      	beq.n	8004594 <osMessageQueueNew+0xfc>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d059      	beq.n	8004594 <osMessageQueueNew+0xfc>
    mem = -1;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d029      	beq.n	8004540 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <osMessageQueueNew+0x82>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b4f      	cmp	r3, #79	; 0x4f
 80044fa:	d90e      	bls.n	800451a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <osMessageQueueNew+0x82>
        mem = 1;
 8004514:	2301      	movs	r3, #1
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	e014      	b.n	8004544 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d110      	bne.n	8004544 <osMessageQueueNew+0xac>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10c      	bne.n	8004544 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <osMessageQueueNew+0xac>
          mem = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	623b      	str	r3, [r7, #32]
 800453e:	e001      	b.n	8004544 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10b      	bne.n	8004562 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2100      	movs	r1, #0
 8004554:	9100      	str	r1, [sp, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fa5b 	bl	8004a14 <xQueueGenericCreateStatic>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24
 8004560:	e008      	b.n	8004574 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004568:	2200      	movs	r2, #0
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fad3 	bl	8004b18 <xQueueGenericCreate>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e001      	b.n	800458c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800458c:	69f9      	ldr	r1, [r7, #28]
 800458e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004590:	f000 ff4a 	bl	8005428 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000034 	.word	0x20000034

080045a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045bc:	f3ef 8305 	mrs	r3, IPSR
 80045c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80045c2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10f      	bne.n	80045e8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c8:	f3ef 8310 	mrs	r3, PRIMASK
 80045cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d4:	f3ef 8311 	mrs	r3, BASEPRI
 80045d8:	617b      	str	r3, [r7, #20]
  return(result);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02c      	beq.n	800463a <osMessageQueuePut+0x96>
 80045e0:	4b28      	ldr	r3, [pc, #160]	; (8004684 <osMessageQueuePut+0xe0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d128      	bne.n	800463a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <osMessageQueuePut+0x56>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <osMessageQueuePut+0x56>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80045fa:	f06f 0303 	mvn.w	r3, #3
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004600:	e039      	b.n	8004676 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004606:	f107 0210 	add.w	r2, r7, #16
 800460a:	2300      	movs	r3, #0
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	6a38      	ldr	r0, [r7, #32]
 8004610:	f000 fbee 	bl	8004df0 <xQueueGenericSendFromISR>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d003      	beq.n	8004622 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800461a:	f06f 0302 	mvn.w	r3, #2
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004620:	e029      	b.n	8004676 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d026      	beq.n	8004676 <osMessageQueuePut+0xd2>
 8004628:	4b17      	ldr	r3, [pc, #92]	; (8004688 <osMessageQueuePut+0xe4>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004638:	e01d      	b.n	8004676 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <osMessageQueuePut+0xa2>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004646:	f06f 0303 	mvn.w	r3, #3
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	e014      	b.n	8004678 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800464e:	2300      	movs	r3, #0
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	6a38      	ldr	r0, [r7, #32]
 8004656:	f000 fac5 	bl	8004be4 <xQueueGenericSend>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d00b      	beq.n	8004678 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004666:	f06f 0301 	mvn.w	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e004      	b.n	8004678 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800466e:	f06f 0302 	mvn.w	r3, #2
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e000      	b.n	8004678 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004676:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000034 	.word	0x20000034
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80046a8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ae:	f3ef 8310 	mrs	r3, PRIMASK
 80046b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ba:	f3ef 8311 	mrs	r3, BASEPRI
 80046be:	617b      	str	r3, [r7, #20]
  return(result);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02c      	beq.n	8004720 <osMessageQueueGet+0x94>
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <osMessageQueueGet+0xdc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d128      	bne.n	8004720 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <osMessageQueueGet+0x54>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <osMessageQueueGet+0x54>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80046e0:	f06f 0303 	mvn.w	r3, #3
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046e6:	e038      	b.n	800475a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6a38      	ldr	r0, [r7, #32]
 80046f6:	f000 fd01 	bl	80050fc <xQueueReceiveFromISR>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d003      	beq.n	8004708 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004700:	f06f 0302 	mvn.w	r3, #2
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004706:	e028      	b.n	800475a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d025      	beq.n	800475a <osMessageQueueGet+0xce>
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <osMessageQueueGet+0xe0>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800471e:	e01c      	b.n	800475a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <osMessageQueueGet+0xa0>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800472c:	f06f 0303 	mvn.w	r3, #3
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e013      	b.n	800475c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	6a38      	ldr	r0, [r7, #32]
 800473a:	f000 fbf9 	bl	8004f30 <xQueueReceive>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d00b      	beq.n	800475c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800474a:	f06f 0301 	mvn.w	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e004      	b.n	800475c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004752:	f06f 0302 	mvn.w	r3, #2
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	e000      	b.n	800475c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800475a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800475e:	4618      	mov	r0, r3
 8004760:	3728      	adds	r7, #40	; 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000034 	.word	0x20000034
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <vApplicationGetIdleTaskMemory+0x2c>)
 8004780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <vApplicationGetIdleTaskMemory+0x30>)
 8004786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20000038 	.word	0x20000038
 80047a0:	20000094 	.word	0x20000094

080047a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80047b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a06      	ldr	r2, [pc, #24]	; (80047d4 <vApplicationGetTimerTaskMemory+0x30>)
 80047ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000294 	.word	0x20000294
 80047d4:	200002f0 	.word	0x200002f0

080047d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f103 0208 	add.w	r2, r3, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0208 	add.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f103 0208 	add.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d103      	bne.n	800489a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e00c      	b.n	80048b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3308      	adds	r3, #8
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e002      	b.n	80048a8 <vListInsert+0x2e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d2f6      	bcs.n	80048a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6892      	ldr	r2, [r2, #8]
 8004902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6852      	ldr	r2, [r2, #4]
 800490c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d103      	bne.n	8004920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1e5a      	subs	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10c      	bne.n	800496e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	b672      	cpsid	i
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	b662      	cpsie	i
 8004968:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800496e:	f002 f945 	bl	8006bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	441a      	add	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	3b01      	subs	r3, #1
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	441a      	add	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d114      	bne.n	80049ee <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01a      	beq.n	8004a02 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3310      	adds	r3, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f9ff 	bl	8005dd4 <xTaskRemoveFromEventList>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d012      	beq.n	8004a02 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <xQueueGenericReset+0xd0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	e009      	b.n	8004a02 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3310      	adds	r3, #16
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fef0 	bl	80047d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff feeb 	bl	80047d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a02:	f002 f92f 	bl	8006c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a06:	2301      	movs	r3, #1
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08e      	sub	sp, #56	; 0x38
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	b672      	cpsid	i
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	b662      	cpsie	i
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10c      	bne.n	8004a62 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	b672      	cpsid	i
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	b662      	cpsie	i
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <xQueueGenericCreateStatic+0x5a>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <xQueueGenericCreateStatic+0x5e>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGenericCreateStatic+0x60>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10c      	bne.n	8004a92 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	b672      	cpsid	i
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	b662      	cpsie	i
 8004a8c:	623b      	str	r3, [r7, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <xQueueGenericCreateStatic+0x8a>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericCreateStatic+0x8e>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericCreateStatic+0x90>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10c      	bne.n	8004ac2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	b672      	cpsid	i
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	b662      	cpsie	i
 8004abc:	61fb      	str	r3, [r7, #28]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ac2:	2350      	movs	r3, #80	; 0x50
 8004ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d00c      	beq.n	8004ae6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	b672      	cpsid	i
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	b662      	cpsie	i
 8004ae0:	61bb      	str	r3, [r7, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ae6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004afa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f847 	bl	8004b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3730      	adds	r7, #48	; 0x30
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	b672      	cpsid	i
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	b662      	cpsie	i
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e004      	b.n	8004b5c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	3350      	adds	r3, #80	; 0x50
 8004b60:	4618      	mov	r0, r3
 8004b62:	f002 f977 	bl	8006e54 <pvPortMalloc>
 8004b66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d011      	beq.n	8004b92 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3350      	adds	r3, #80	; 0x50
 8004b76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b80:	79fa      	ldrb	r2, [r7, #7]
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f805 	bl	8004b9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b92:	69bb      	ldr	r3, [r7, #24]
	}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e002      	b.n	8004bbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bca:	2101      	movs	r1, #1
 8004bcc:	69b8      	ldr	r0, [r7, #24]
 8004bce:	f7ff feb7 	bl	8004940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10c      	bne.n	8004c1a <xQueueGenericSend+0x36>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	b672      	cpsid	i
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	b662      	cpsie	i
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <xQueueGenericSend+0x44>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <xQueueGenericSend+0x48>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <xQueueGenericSend+0x4a>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <xQueueGenericSend+0x68>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	b672      	cpsid	i
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	b662      	cpsie	i
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d103      	bne.n	8004c5a <xQueueGenericSend+0x76>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <xQueueGenericSend+0x7a>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <xQueueGenericSend+0x7c>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10c      	bne.n	8004c7e <xQueueGenericSend+0x9a>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	b672      	cpsid	i
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	b662      	cpsie	i
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c7e:	f001 fa6f 	bl	8006160 <xTaskGetSchedulerState>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <xQueueGenericSend+0xaa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <xQueueGenericSend+0xae>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <xQueueGenericSend+0xb0>
 8004c92:	2300      	movs	r3, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <xQueueGenericSend+0xce>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	b672      	cpsid	i
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	b662      	cpsie	i
 8004cac:	61fb      	str	r3, [r7, #28]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cb2:	f001 ffa3 	bl	8006bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <xQueueGenericSend+0xe4>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d129      	bne.n	8004d1c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cce:	f000 fa9b 	bl	8005208 <prvCopyDataToQueue>
 8004cd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f877 	bl	8005dd4 <xTaskRemoveFromEventList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <xQueueGenericSend+0x208>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e00a      	b.n	8004d14 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <xQueueGenericSend+0x208>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d14:	f001 ffa6 	bl	8006c64 <vPortExitCritical>
				return pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e063      	b.n	8004de4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d22:	f001 ff9f 	bl	8006c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e05c      	b.n	8004de4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 f8b3 	bl	8005ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d3e:	f001 ff91 	bl	8006c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d42:	f000 fe19 	bl	8005978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d46:	f001 ff59 	bl	8006bfc <vPortEnterCritical>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d50:	b25b      	sxtb	r3, r3
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d103      	bne.n	8004d60 <xQueueGenericSend+0x17c>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d103      	bne.n	8004d76 <xQueueGenericSend+0x192>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d76:	f001 ff75 	bl	8006c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d7a:	1d3a      	adds	r2, r7, #4
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f8a2 	bl	8005ecc <xTaskCheckForTimeOut>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d124      	bne.n	8004dd8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d90:	f000 fb32 	bl	80053f8 <prvIsQueueFull>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d018      	beq.n	8004dcc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4611      	mov	r1, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 ffc2 	bl	8005d2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004daa:	f000 fabd 	bl	8005328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dae:	f000 fdf1 	bl	8005994 <xTaskResumeAll>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f47f af7c 	bne.w	8004cb2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <xQueueGenericSend+0x208>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	e772      	b.n	8004cb2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dce:	f000 faab 	bl	8005328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dd2:	f000 fddf 	bl	8005994 <xTaskResumeAll>
 8004dd6:	e76c      	b.n	8004cb2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dda:	f000 faa5 	bl	8005328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dde:	f000 fdd9 	bl	8005994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3738      	adds	r7, #56	; 0x38
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10c      	bne.n	8004e22 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	b672      	cpsid	i
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	b662      	cpsie	i
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <xQueueGenericSendFromISR+0x40>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericSendFromISR+0x44>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericSendFromISR+0x46>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	b672      	cpsid	i
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	b662      	cpsie	i
 8004e4e:	623b      	str	r3, [r7, #32]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d103      	bne.n	8004e62 <xQueueGenericSendFromISR+0x72>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <xQueueGenericSendFromISR+0x76>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <xQueueGenericSendFromISR+0x78>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10c      	bne.n	8004e86 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	b672      	cpsid	i
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	b662      	cpsie	i
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e86:	f001 ffa1 	bl	8006dcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	b672      	cpsid	i
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	b662      	cpsie	i
 8004ea2:	61ba      	str	r2, [r7, #24]
 8004ea4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <xQueueGenericSendFromISR+0xcc>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d12c      	bne.n	8004f16 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ecc:	f000 f99c 	bl	8005208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ed0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d112      	bne.n	8004f00 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	3324      	adds	r3, #36	; 0x24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 ff74 	bl	8005dd4 <xTaskRemoveFromEventList>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e007      	b.n	8004f10 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f14:	e001      	b.n	8004f1a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3738      	adds	r7, #56	; 0x38
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08c      	sub	sp, #48	; 0x30
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <xQueueReceive+0x34>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	b672      	cpsid	i
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	b662      	cpsie	i
 8004f5e:	623b      	str	r3, [r7, #32]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <xQueueReceive+0x42>
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <xQueueReceive+0x46>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <xQueueReceive+0x48>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10c      	bne.n	8004f96 <xQueueReceive+0x66>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	b672      	cpsid	i
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	b662      	cpsie	i
 8004f90:	61fb      	str	r3, [r7, #28]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f96:	f001 f8e3 	bl	8006160 <xTaskGetSchedulerState>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xQueueReceive+0x76>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <xQueueReceive+0x7a>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <xQueueReceive+0x7c>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10c      	bne.n	8004fca <xQueueReceive+0x9a>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	b672      	cpsid	i
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	b662      	cpsie	i
 8004fc4:	61bb      	str	r3, [r7, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fca:	f001 fe17 	bl	8006bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01f      	beq.n	800501a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fde:	f000 f97d 	bl	80052dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	1e5a      	subs	r2, r3, #1
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00f      	beq.n	8005012 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 feec 	bl	8005dd4 <xTaskRemoveFromEventList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005002:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <xQueueReceive+0x1c8>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005012:	f001 fe27 	bl	8006c64 <vPortExitCritical>
				return pdPASS;
 8005016:	2301      	movs	r3, #1
 8005018:	e069      	b.n	80050ee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005020:	f001 fe20 	bl	8006c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005024:	2300      	movs	r3, #0
 8005026:	e062      	b.n	80050ee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	4618      	mov	r0, r3
 8005034:	f000 ff34 	bl	8005ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800503c:	f001 fe12 	bl	8006c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005040:	f000 fc9a 	bl	8005978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005044:	f001 fdda 	bl	8006bfc <vPortEnterCritical>
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d103      	bne.n	800505e <xQueueReceive+0x12e>
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005064:	b25b      	sxtb	r3, r3
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d103      	bne.n	8005074 <xQueueReceive+0x144>
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005074:	f001 fdf6 	bl	8006c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005078:	1d3a      	adds	r2, r7, #4
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 ff23 	bl	8005ecc <xTaskCheckForTimeOut>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d123      	bne.n	80050d4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800508c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508e:	f000 f99d 	bl	80053cc <prvIsQueueEmpty>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	3324      	adds	r3, #36	; 0x24
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe43 	bl	8005d2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a8:	f000 f93e 	bl	8005328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050ac:	f000 fc72 	bl	8005994 <xTaskResumeAll>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d189      	bne.n	8004fca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <xQueueReceive+0x1c8>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	e780      	b.n	8004fca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ca:	f000 f92d 	bl	8005328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ce:	f000 fc61 	bl	8005994 <xTaskResumeAll>
 80050d2:	e77a      	b.n	8004fca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d6:	f000 f927 	bl	8005328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050da:	f000 fc5b 	bl	8005994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e0:	f000 f974 	bl	80053cc <prvIsQueueEmpty>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f43f af6f 	beq.w	8004fca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3730      	adds	r7, #48	; 0x30
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08e      	sub	sp, #56	; 0x38
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	b672      	cpsid	i
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	b662      	cpsie	i
 8005126:	623b      	str	r3, [r7, #32]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <xQueueReceiveFromISR+0x3e>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xQueueReceiveFromISR+0x42>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueReceiveFromISR+0x44>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10c      	bne.n	800515e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	b672      	cpsid	i
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	b662      	cpsie	i
 8005158:	61fb      	str	r3, [r7, #28]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800515e:	f001 fe35 	bl	8006dcc <vPortValidateInterruptPriority>
	__asm volatile
 8005162:	f3ef 8211 	mrs	r2, BASEPRI
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	b672      	cpsid	i
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	b662      	cpsie	i
 800517a:	61ba      	str	r2, [r7, #24]
 800517c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800517e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02f      	beq.n	80051ee <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800519c:	f000 f89e 	bl	80052dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d112      	bne.n	80051d8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	3310      	adds	r3, #16
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fe08 	bl	8005dd4 <xTaskRemoveFromEventList>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00e      	beq.n	80051e8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e007      	b.n	80051e8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051dc:	3301      	adds	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	b25a      	sxtb	r2, r3
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80051e8:	2301      	movs	r3, #1
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
 80051ec:	e001      	b.n	80051f2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f383 8811 	msr	BASEPRI, r3
}
 80051fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005200:	4618      	mov	r0, r3
 8005202:	3738      	adds	r7, #56	; 0x38
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d14d      	bne.n	80052ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 ffb2 	bl	800619c <xTaskPriorityDisinherit>
 8005238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	e043      	b.n	80052ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d119      	bne.n	800527c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6858      	ldr	r0, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	f002 f806 	bl	8007264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d32b      	bcc.n	80052ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	e026      	b.n	80052ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68d8      	ldr	r0, [r3, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	461a      	mov	r2, r3
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	f001 ffec 	bl	8007264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	425b      	negs	r3, r3
 8005296:	441a      	add	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d207      	bcs.n	80052b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	425b      	negs	r3, r3
 80052b2:	441a      	add	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d105      	bne.n	80052ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052d2:	697b      	ldr	r3, [r7, #20]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	441a      	add	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d303      	bcc.n	8005310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68d9      	ldr	r1, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	461a      	mov	r2, r3
 800531a:	6838      	ldr	r0, [r7, #0]
 800531c:	f001 ffa2 	bl	8007264 <memcpy>
	}
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005330:	f001 fc64 	bl	8006bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800533c:	e011      	b.n	8005362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d012      	beq.n	800536c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3324      	adds	r3, #36	; 0x24
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fd42 	bl	8005dd4 <xTaskRemoveFromEventList>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005356:	f000 fe1f 	bl	8005f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	3b01      	subs	r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	dce9      	bgt.n	800533e <prvUnlockQueue+0x16>
 800536a:	e000      	b.n	800536e <prvUnlockQueue+0x46>
					break;
 800536c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005376:	f001 fc75 	bl	8006c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800537a:	f001 fc3f 	bl	8006bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005386:	e011      	b.n	80053ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d012      	beq.n	80053b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3310      	adds	r3, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fd1d 	bl	8005dd4 <xTaskRemoveFromEventList>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053a0:	f000 fdfa 	bl	8005f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dce9      	bgt.n	8005388 <prvUnlockQueue+0x60>
 80053b4:	e000      	b.n	80053b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	22ff      	movs	r2, #255	; 0xff
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053c0:	f001 fc50 	bl	8006c64 <vPortExitCritical>
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053d4:	f001 fc12 	bl	8006bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e001      	b.n	80053ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ea:	f001 fc3b 	bl	8006c64 <vPortExitCritical>

	return xReturn;
 80053ee:	68fb      	ldr	r3, [r7, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005400:	f001 fbfc 	bl	8006bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	429a      	cmp	r2, r3
 800540e:	d102      	bne.n	8005416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e001      	b.n	800541a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800541a:	f001 fc23 	bl	8006c64 <vPortExitCritical>

	return xReturn;
 800541e:	68fb      	ldr	r3, [r7, #12]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e014      	b.n	8005462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005438:	4a0f      	ldr	r2, [pc, #60]	; (8005478 <vQueueAddToRegistry+0x50>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005444:	490c      	ldr	r1, [pc, #48]	; (8005478 <vQueueAddToRegistry+0x50>)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <vQueueAddToRegistry+0x50>)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800545a:	e006      	b.n	800546a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b07      	cmp	r3, #7
 8005466:	d9e7      	bls.n	8005438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2000552c 	.word	0x2000552c

0800547c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800548c:	f001 fbb6 	bl	8006bfc <vPortEnterCritical>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005496:	b25b      	sxtb	r3, r3
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d103      	bne.n	80054a6 <vQueueWaitForMessageRestricted+0x2a>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d103      	bne.n	80054bc <vQueueWaitForMessageRestricted+0x40>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	f001 fbd2 	bl	8006c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fc51 	bl	8005d78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff ff26 	bl	8005328 <prvUnlockQueue>
	}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	; 0x38
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10c      	bne.n	8005512 <xTaskCreateStatic+0x2e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	b672      	cpsid	i
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	b662      	cpsie	i
 800550c:	623b      	str	r3, [r7, #32]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10c      	bne.n	8005532 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	61fb      	str	r3, [r7, #28]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005532:	235c      	movs	r3, #92	; 0x5c
 8005534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b5c      	cmp	r3, #92	; 0x5c
 800553a:	d00c      	beq.n	8005556 <xTaskCreateStatic+0x72>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	b672      	cpsid	i
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	b662      	cpsie	i
 8005550:	61bb      	str	r3, [r7, #24]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01e      	beq.n	800559c <xTaskCreateStatic+0xb8>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2202      	movs	r2, #2
 8005572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005576:	2300      	movs	r3, #0
 8005578:	9303      	str	r3, [sp, #12]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f850 	bl	8005634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005596:	f000 f8df 	bl	8005758 <prvAddNewTaskToReadyList>
 800559a:	e001      	b.n	80055a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055a0:	697b      	ldr	r3, [r7, #20]
	}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3728      	adds	r7, #40	; 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08c      	sub	sp, #48	; 0x30
 80055ae:	af04      	add	r7, sp, #16
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fc48 	bl	8006e54 <pvPortMalloc>
 80055c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055cc:	205c      	movs	r0, #92	; 0x5c
 80055ce:	f001 fc41 	bl	8006e54 <pvPortMalloc>
 80055d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
 80055e0:	e005      	b.n	80055ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f001 fd00 	bl	8006fe8 <vPortFree>
 80055e8:	e001      	b.n	80055ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d017      	beq.n	8005624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	2300      	movs	r3, #0
 8005600:	9303      	str	r3, [sp, #12]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	9302      	str	r3, [sp, #8]
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f80e 	bl	8005634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005618:	69f8      	ldr	r0, [r7, #28]
 800561a:	f000 f89d 	bl	8005758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800561e:	2301      	movs	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e002      	b.n	800562a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
 8005628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800562a:	69bb      	ldr	r3, [r7, #24]
	}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	461a      	mov	r2, r3
 800564c:	21a5      	movs	r1, #165	; 0xa5
 800564e:	f001 fe17 	bl	8007280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800565c:	440b      	add	r3, r1
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	b672      	cpsid	i
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	b662      	cpsie	i
 800568a:	617b      	str	r3, [r7, #20]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01f      	beq.n	80056d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e012      	b.n	80056c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	7819      	ldrb	r1, [r3, #0]
 80056a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	3334      	adds	r3, #52	; 0x34
 80056ac:	460a      	mov	r2, r1
 80056ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d9e9      	bls.n	800569c <prvInitialiseNewTask+0x68>
 80056c8:	e000      	b.n	80056cc <prvInitialiseNewTask+0x98>
			{
				break;
 80056ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d4:	e003      	b.n	80056de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b37      	cmp	r3, #55	; 0x37
 80056e2:	d901      	bls.n	80056e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056e4:	2337      	movs	r3, #55	; 0x37
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2200      	movs	r2, #0
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f88a 	bl	8004818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	3318      	adds	r3, #24
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff f885 	bl	8004818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	2200      	movs	r2, #0
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	69b8      	ldr	r0, [r7, #24]
 8005738:	f001 f952 	bl	80069e0 <pxPortInitialiseStack>
 800573c:	4602      	mov	r2, r0
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005760:	f001 fa4c 	bl	8006bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005764:	4b2d      	ldr	r3, [pc, #180]	; (800581c <prvAddNewTaskToReadyList+0xc4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a2c      	ldr	r2, [pc, #176]	; (800581c <prvAddNewTaskToReadyList+0xc4>)
 800576c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800576e:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005776:	4a2a      	ldr	r2, [pc, #168]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <prvAddNewTaskToReadyList+0xc4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d110      	bne.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005784:	f000 fc2c 	bl	8005fe0 <prvInitialiseTaskLists>
 8005788:	e00d      	b.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800578a:	4b26      	ldr	r3, [pc, #152]	; (8005824 <prvAddNewTaskToReadyList+0xcc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d802      	bhi.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <prvAddNewTaskToReadyList+0xd0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <prvAddNewTaskToReadyList+0xd0>)
 80057ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <prvAddNewTaskToReadyList+0xd0>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <prvAddNewTaskToReadyList+0xd4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d903      	bls.n	80057cc <prvAddNewTaskToReadyList+0x74>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <prvAddNewTaskToReadyList+0xd4>)
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <prvAddNewTaskToReadyList+0xd8>)
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7ff f825 	bl	8004832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057e8:	f001 fa3c 	bl	8006c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <prvAddNewTaskToReadyList+0xcc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d207      	bcs.n	8005812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <prvAddNewTaskToReadyList+0xdc>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000bc4 	.word	0x20000bc4
 8005820:	200006f0 	.word	0x200006f0
 8005824:	20000bd0 	.word	0x20000bd0
 8005828:	20000be0 	.word	0x20000be0
 800582c:	20000bcc 	.word	0x20000bcc
 8005830:	200006f4 	.word	0x200006f4
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d019      	beq.n	800587e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <vTaskDelay+0x64>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <vTaskDelay+0x34>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	60bb      	str	r3, [r7, #8]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800586c:	f000 f884 	bl	8005978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fd04 	bl	8006280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005878:	f000 f88c 	bl	8005994 <xTaskResumeAll>
 800587c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d107      	bne.n	8005894 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <vTaskDelay+0x68>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000bec 	.word	0x20000bec
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058b2:	463a      	mov	r2, r7
 80058b4:	1d39      	adds	r1, r7, #4
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe ff58 	bl	8004770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	9202      	str	r2, [sp, #8]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	460a      	mov	r2, r1
 80058d2:	4923      	ldr	r1, [pc, #140]	; (8005960 <vTaskStartScheduler+0xbc>)
 80058d4:	4823      	ldr	r0, [pc, #140]	; (8005964 <vTaskStartScheduler+0xc0>)
 80058d6:	f7ff fe05 	bl	80054e4 <xTaskCreateStatic>
 80058da:	4603      	mov	r3, r0
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <vTaskStartScheduler+0xc4>)
 80058de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <vTaskStartScheduler+0xc4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058f8:	f000 fd16 	bl	8006328 <xTimerCreateTimerTask>
 80058fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d118      	bne.n	8005936 <vTaskStartScheduler+0x92>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	613b      	str	r3, [r7, #16]
}
 800591a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <vTaskStartScheduler+0xc8>)
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005924:	4b12      	ldr	r3, [pc, #72]	; (8005970 <vTaskStartScheduler+0xcc>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <vTaskStartScheduler+0xd0>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005930:	f001 f8e6 	bl	8006b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005934:	e010      	b.n	8005958 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d10c      	bne.n	8005958 <vTaskStartScheduler+0xb4>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	b672      	cpsid	i
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	b662      	cpsie	i
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vTaskStartScheduler+0xb2>
}
 8005958:	bf00      	nop
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	0800733c 	.word	0x0800733c
 8005964:	08005fb1 	.word	0x08005fb1
 8005968:	20000be8 	.word	0x20000be8
 800596c:	20000be4 	.word	0x20000be4
 8005970:	20000bd0 	.word	0x20000bd0
 8005974:	20000bc8 	.word	0x20000bc8

08005978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <vTaskSuspendAll+0x18>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	4a03      	ldr	r2, [pc, #12]	; (8005990 <vTaskSuspendAll+0x18>)
 8005984:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005986:	bf00      	nop
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000bec 	.word	0x20000bec

08005994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059a2:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <xTaskResumeAll+0x11c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10c      	bne.n	80059c4 <xTaskResumeAll+0x30>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	b672      	cpsid	i
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	b662      	cpsie	i
 80059be:	603b      	str	r3, [r7, #0]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059c4:	f001 f91a 	bl	8006bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059c8:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <xTaskResumeAll+0x11c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a38      	ldr	r2, [pc, #224]	; (8005ab0 <xTaskResumeAll+0x11c>)
 80059d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <xTaskResumeAll+0x11c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d162      	bne.n	8005aa0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059da:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <xTaskResumeAll+0x120>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d05e      	beq.n	8005aa0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059e2:	e02f      	b.n	8005a44 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e4:	4b34      	ldr	r3, [pc, #208]	; (8005ab8 <xTaskResumeAll+0x124>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3318      	adds	r3, #24
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe ff7b 	bl	80048ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe ff76 	bl	80048ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <xTaskResumeAll+0x128>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d903      	bls.n	8005a14 <xTaskResumeAll+0x80>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <xTaskResumeAll+0x128>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <xTaskResumeAll+0x12c>)
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe ff01 	bl	8004832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <xTaskResumeAll+0x130>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005a3e:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <xTaskResumeAll+0x134>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <xTaskResumeAll+0x124>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1cb      	bne.n	80059e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a52:	f000 fb65 	bl	8006120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <xTaskResumeAll+0x138>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d010      	beq.n	8005a84 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a62:	f000 f847 	bl	8005af4 <xTaskIncrementTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005a6c:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <xTaskResumeAll+0x134>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f1      	bne.n	8005a62 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <xTaskResumeAll+0x138>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <xTaskResumeAll+0x134>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <xTaskResumeAll+0x13c>)
 8005a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aa0:	f001 f8e0 	bl	8006c64 <vPortExitCritical>

	return xAlreadyYielded;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000bec 	.word	0x20000bec
 8005ab4:	20000bc4 	.word	0x20000bc4
 8005ab8:	20000b84 	.word	0x20000b84
 8005abc:	20000bcc 	.word	0x20000bcc
 8005ac0:	200006f4 	.word	0x200006f4
 8005ac4:	200006f0 	.word	0x200006f0
 8005ac8:	20000bd8 	.word	0x20000bd8
 8005acc:	20000bd4 	.word	0x20000bd4
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <xTaskGetTickCount+0x1c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ae0:	687b      	ldr	r3, [r7, #4]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000bc8 	.word	0x20000bc8

08005af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005afe:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <xTaskIncrementTick+0x14c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 808b 	bne.w	8005c1e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b08:	4b4e      	ldr	r3, [pc, #312]	; (8005c44 <xTaskIncrementTick+0x150>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b10:	4a4c      	ldr	r2, [pc, #304]	; (8005c44 <xTaskIncrementTick+0x150>)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d122      	bne.n	8005b62 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <xTaskIncrementTick+0x154>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	b672      	cpsid	i
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	b662      	cpsie	i
 8005b3a:	603b      	str	r3, [r7, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <xTaskIncrementTick+0x4a>
 8005b40:	4b41      	ldr	r3, [pc, #260]	; (8005c48 <xTaskIncrementTick+0x154>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <xTaskIncrementTick+0x158>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3f      	ldr	r2, [pc, #252]	; (8005c48 <xTaskIncrementTick+0x154>)
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4a3f      	ldr	r2, [pc, #252]	; (8005c4c <xTaskIncrementTick+0x158>)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b3e      	ldr	r3, [pc, #248]	; (8005c50 <xTaskIncrementTick+0x15c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	4a3d      	ldr	r2, [pc, #244]	; (8005c50 <xTaskIncrementTick+0x15c>)
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	f000 fadf 	bl	8006120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b62:	4b3c      	ldr	r3, [pc, #240]	; (8005c54 <xTaskIncrementTick+0x160>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d349      	bcc.n	8005c00 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <xTaskIncrementTick+0x154>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b76:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <xTaskIncrementTick+0x160>)
 8005b78:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7c:	601a      	str	r2, [r3, #0]
					break;
 8005b7e:	e03f      	b.n	8005c00 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <xTaskIncrementTick+0x154>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d203      	bcs.n	8005ba0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b98:	4a2e      	ldr	r2, [pc, #184]	; (8005c54 <xTaskIncrementTick+0x160>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b9e:	e02f      	b.n	8005c00 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fea1 	bl	80048ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe fe98 	bl	80048ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <xTaskIncrementTick+0x164>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d903      	bls.n	8005bd0 <xTaskIncrementTick+0xdc>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <xTaskIncrementTick+0x164>)
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <xTaskIncrementTick+0x168>)
 8005bde:	441a      	add	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fe fe23 	bl	8004832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <xTaskIncrementTick+0x16c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3b8      	bcc.n	8005b6c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfe:	e7b5      	b.n	8005b6c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c00:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <xTaskIncrementTick+0x16c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4915      	ldr	r1, [pc, #84]	; (8005c5c <xTaskIncrementTick+0x168>)
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d907      	bls.n	8005c28 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e004      	b.n	8005c28 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <xTaskIncrementTick+0x170>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <xTaskIncrementTick+0x170>)
 8005c26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c28:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <xTaskIncrementTick+0x174>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c34:	697b      	ldr	r3, [r7, #20]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000bec 	.word	0x20000bec
 8005c44:	20000bc8 	.word	0x20000bc8
 8005c48:	20000b7c 	.word	0x20000b7c
 8005c4c:	20000b80 	.word	0x20000b80
 8005c50:	20000bdc 	.word	0x20000bdc
 8005c54:	20000be4 	.word	0x20000be4
 8005c58:	20000bcc 	.word	0x20000bcc
 8005c5c:	200006f4 	.word	0x200006f4
 8005c60:	200006f0 	.word	0x200006f0
 8005c64:	20000bd4 	.word	0x20000bd4
 8005c68:	20000bd8 	.word	0x20000bd8

08005c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c72:	4b29      	ldr	r3, [pc, #164]	; (8005d18 <vTaskSwitchContext+0xac>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c7a:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <vTaskSwitchContext+0xb0>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c80:	e043      	b.n	8005d0a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005c82:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <vTaskSwitchContext+0xb0>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <vTaskSwitchContext+0xb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e012      	b.n	8005cb6 <vTaskSwitchContext+0x4a>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <vTaskSwitchContext+0x44>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	b672      	cpsid	i
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	b662      	cpsie	i
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vTaskSwitchContext+0x42>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	491b      	ldr	r1, [pc, #108]	; (8005d24 <vTaskSwitchContext+0xb8>)
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0e2      	beq.n	8005c90 <vTaskSwitchContext+0x24>
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <vTaskSwitchContext+0xb8>)
 8005cd6:	4413      	add	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3308      	adds	r3, #8
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d104      	bne.n	8005cfa <vTaskSwitchContext+0x8e>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <vTaskSwitchContext+0xbc>)
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <vTaskSwitchContext+0xb4>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000bec 	.word	0x20000bec
 8005d1c:	20000bd8 	.word	0x20000bd8
 8005d20:	20000bcc 	.word	0x20000bcc
 8005d24:	200006f4 	.word	0x200006f4
 8005d28:	200006f0 	.word	0x200006f0

08005d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10c      	bne.n	8005d56 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	b672      	cpsid	i
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	b662      	cpsie	i
 8005d50:	60fb      	str	r3, [r7, #12]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <vTaskPlaceOnEventList+0x48>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fe fd8b 	bl	800487a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d64:	2101      	movs	r1, #1
 8005d66:	6838      	ldr	r0, [r7, #0]
 8005d68:	f000 fa8a 	bl	8006280 <prvAddCurrentTaskToDelayedList>
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200006f0 	.word	0x200006f0

08005d78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	b672      	cpsid	i
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	b662      	cpsie	i
 8005d9e:	617b      	str	r3, [r7, #20]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <vTaskPlaceOnEventListRestricted+0x58>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3318      	adds	r3, #24
 8005daa:	4619      	mov	r1, r3
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7fe fd40 	bl	8004832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68b8      	ldr	r0, [r7, #8]
 8005dc2:	f000 fa5d 	bl	8006280 <prvAddCurrentTaskToDelayedList>
	}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200006f0 	.word	0x200006f0

08005dd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	b672      	cpsid	i
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	b662      	cpsie	i
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3318      	adds	r3, #24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fd6f 	bl	80048ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <xTaskRemoveFromEventList+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d11d      	bne.n	8005e52 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fd66 	bl	80048ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <xTaskRemoveFromEventList+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d903      	bls.n	8005e34 <xTaskRemoveFromEventList+0x60>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <xTaskRemoveFromEventList+0xb8>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <xTaskRemoveFromEventList+0xbc>)
 8005e42:	441a      	add	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7fe fcf1 	bl	8004832 <vListInsertEnd>
 8005e50:	e005      	b.n	8005e5e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4619      	mov	r1, r3
 8005e58:	480e      	ldr	r0, [pc, #56]	; (8005e94 <xTaskRemoveFromEventList+0xc0>)
 8005e5a:	f7fe fcea 	bl	8004832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <xTaskRemoveFromEventList+0xc4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d905      	bls.n	8005e78 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <xTaskRemoveFromEventList+0xc8>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e001      	b.n	8005e7c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e7c:	697b      	ldr	r3, [r7, #20]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000bec 	.word	0x20000bec
 8005e8c:	20000bcc 	.word	0x20000bcc
 8005e90:	200006f4 	.word	0x200006f4
 8005e94:	20000b84 	.word	0x20000b84
 8005e98:	200006f0 	.word	0x200006f0
 8005e9c:	20000bd8 	.word	0x20000bd8

08005ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <vTaskInternalSetTimeOutState+0x24>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <vTaskInternalSetTimeOutState+0x28>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20000bdc 	.word	0x20000bdc
 8005ec8:	20000bc8 	.word	0x20000bc8

08005ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	b672      	cpsid	i
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	b662      	cpsie	i
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005f16:	f000 fe71 	bl	8006bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <xTaskCheckForTimeOut+0xc4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d102      	bne.n	8005f3a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e023      	b.n	8005f82 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <xTaskCheckForTimeOut+0xc8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d007      	beq.n	8005f56 <xTaskCheckForTimeOut+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d302      	bcc.n	8005f56 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e015      	b.n	8005f82 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d20b      	bcs.n	8005f78 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff97 	bl	8005ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e004      	b.n	8005f82 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f82:	f000 fe6f 	bl	8006c64 <vPortExitCritical>

	return xReturn;
 8005f86:	69fb      	ldr	r3, [r7, #28]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000bc8 	.word	0x20000bc8
 8005f94:	20000bdc 	.word	0x20000bdc

08005f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <vTaskMissedYield+0x14>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000bd8 	.word	0x20000bd8

08005fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fb8:	f000 f852 	bl	8006060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <prvIdleTask+0x28>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d9f9      	bls.n	8005fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <prvIdleTask+0x2c>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fd4:	e7f0      	b.n	8005fb8 <prvIdleTask+0x8>
 8005fd6:	bf00      	nop
 8005fd8:	200006f4 	.word	0x200006f4
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	e00c      	b.n	8006006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4a12      	ldr	r2, [pc, #72]	; (8006040 <prvInitialiseTaskLists+0x60>)
 8005ff8:	4413      	add	r3, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fbec 	bl	80047d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3301      	adds	r3, #1
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b37      	cmp	r3, #55	; 0x37
 800600a:	d9ef      	bls.n	8005fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800600c:	480d      	ldr	r0, [pc, #52]	; (8006044 <prvInitialiseTaskLists+0x64>)
 800600e:	f7fe fbe3 	bl	80047d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006012:	480d      	ldr	r0, [pc, #52]	; (8006048 <prvInitialiseTaskLists+0x68>)
 8006014:	f7fe fbe0 	bl	80047d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <prvInitialiseTaskLists+0x6c>)
 800601a:	f7fe fbdd 	bl	80047d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800601e:	480c      	ldr	r0, [pc, #48]	; (8006050 <prvInitialiseTaskLists+0x70>)
 8006020:	f7fe fbda 	bl	80047d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006024:	480b      	ldr	r0, [pc, #44]	; (8006054 <prvInitialiseTaskLists+0x74>)
 8006026:	f7fe fbd7 	bl	80047d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <prvInitialiseTaskLists+0x78>)
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <prvInitialiseTaskLists+0x64>)
 800602e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <prvInitialiseTaskLists+0x7c>)
 8006032:	4a05      	ldr	r2, [pc, #20]	; (8006048 <prvInitialiseTaskLists+0x68>)
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200006f4 	.word	0x200006f4
 8006044:	20000b54 	.word	0x20000b54
 8006048:	20000b68 	.word	0x20000b68
 800604c:	20000b84 	.word	0x20000b84
 8006050:	20000b98 	.word	0x20000b98
 8006054:	20000bb0 	.word	0x20000bb0
 8006058:	20000b7c 	.word	0x20000b7c
 800605c:	20000b80 	.word	0x20000b80

08006060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006066:	e019      	b.n	800609c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006068:	f000 fdc8 	bl	8006bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <prvCheckTasksWaitingTermination+0x50>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fc37 	bl	80048ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <prvCheckTasksWaitingTermination+0x54>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3b01      	subs	r3, #1
 8006084:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <prvCheckTasksWaitingTermination+0x54>)
 8006086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 8006090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006092:	f000 fde7 	bl	8006c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f810 	bl	80060bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <prvCheckTasksWaitingTermination+0x58>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e1      	bne.n	8006068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000b98 	.word	0x20000b98
 80060b4:	20000bc4 	.word	0x20000bc4
 80060b8:	20000bac 	.word	0x20000bac

080060bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 ff88 	bl	8006fe8 <vPortFree>
				vPortFree( pxTCB );
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ff85 	bl	8006fe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060de:	e01a      	b.n	8006116 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d103      	bne.n	80060f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 ff7c 	bl	8006fe8 <vPortFree>
	}
 80060f0:	e011      	b.n	8006116 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d00c      	beq.n	8006116 <prvDeleteTCB+0x5a>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	b672      	cpsid	i
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	b662      	cpsie	i
 8006110:	60fb      	str	r3, [r7, #12]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <prvDeleteTCB+0x58>
	}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvResetNextTaskUnblockTime+0x38>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <prvResetNextTaskUnblockTime+0x3c>)
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006138:	e008      	b.n	800614c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <prvResetNextTaskUnblockTime+0x38>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <prvResetNextTaskUnblockTime+0x3c>)
 800614a:	6013      	str	r3, [r2, #0]
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20000b7c 	.word	0x20000b7c
 800615c:	20000be4 	.word	0x20000be4

08006160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <xTaskGetSchedulerState+0x34>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800616e:	2301      	movs	r3, #1
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e008      	b.n	8006186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <xTaskGetSchedulerState+0x38>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800617c:	2302      	movs	r3, #2
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	e001      	b.n	8006186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006186:	687b      	ldr	r3, [r7, #4]
	}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	20000bd0 	.word	0x20000bd0
 8006198:	20000bec 	.word	0x20000bec

0800619c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d05a      	beq.n	8006268 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061b2:	4b30      	ldr	r3, [pc, #192]	; (8006274 <xTaskPriorityDisinherit+0xd8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d00c      	beq.n	80061d6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10c      	bne.n	80061f8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	60bb      	str	r3, [r7, #8]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	429a      	cmp	r2, r3
 800620c:	d02c      	beq.n	8006268 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d128      	bne.n	8006268 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fb66 	bl	80048ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <xTaskPriorityDisinherit+0xdc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <xTaskPriorityDisinherit+0xac>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <xTaskPriorityDisinherit+0xdc>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a09      	ldr	r2, [pc, #36]	; (800627c <xTaskPriorityDisinherit+0xe0>)
 8006256:	441a      	add	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7fe fae7 	bl	8004832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006268:	697b      	ldr	r3, [r7, #20]
	}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200006f0 	.word	0x200006f0
 8006278:	20000bcc 	.word	0x20000bcc
 800627c:	200006f4 	.word	0x200006f4

08006280 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <prvAddCurrentTaskToDelayedList+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006290:	4b20      	ldr	r3, [pc, #128]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fb28 	bl	80048ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d10a      	bne.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062aa:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4819      	ldr	r0, [pc, #100]	; (8006318 <prvAddCurrentTaskToDelayedList+0x98>)
 80062b4:	f7fe fabd 	bl	8004832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062b8:	e026      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d209      	bcs.n	80062e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <prvAddCurrentTaskToDelayedList+0x9c>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7fe facb 	bl	800487a <vListInsert>
}
 80062e4:	e010      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fac1 	bl	800487a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d202      	bcs.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006302:	4a08      	ldr	r2, [pc, #32]	; (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000bc8 	.word	0x20000bc8
 8006314:	200006f0 	.word	0x200006f0
 8006318:	20000bb0 	.word	0x20000bb0
 800631c:	20000b80 	.word	0x20000b80
 8006320:	20000b7c 	.word	0x20000b7c
 8006324:	20000be4 	.word	0x20000be4

08006328 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006332:	f000 fb15 	bl	8006960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <xTimerCreateTimerTask+0x84>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006346:	1d3a      	adds	r2, r7, #4
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fa27 	bl	80047a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	2302      	movs	r3, #2
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	460a      	mov	r2, r1
 8006368:	4911      	ldr	r1, [pc, #68]	; (80063b0 <xTimerCreateTimerTask+0x88>)
 800636a:	4812      	ldr	r0, [pc, #72]	; (80063b4 <xTimerCreateTimerTask+0x8c>)
 800636c:	f7ff f8ba 	bl	80054e4 <xTaskCreateStatic>
 8006370:	4603      	mov	r3, r0
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <xTimerCreateTimerTask+0x90>)
 8006374:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006376:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <xTimerCreateTimerTask+0x90>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800637e:	2301      	movs	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	613b      	str	r3, [r7, #16]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80063a2:	697b      	ldr	r3, [r7, #20]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000c20 	.word	0x20000c20
 80063b0:	08007344 	.word	0x08007344
 80063b4:	080064f9 	.word	0x080064f9
 80063b8:	20000c24 	.word	0x20000c24

080063bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10c      	bne.n	80063ee <xTimerGenericCommand+0x32>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	b672      	cpsid	i
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	b662      	cpsie	i
 80063e8:	623b      	str	r3, [r7, #32]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <xTimerGenericCommand+0x9c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d02a      	beq.n	800644c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b05      	cmp	r3, #5
 8006406:	dc18      	bgt.n	800643a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006408:	f7ff feaa 	bl	8006160 <xTaskGetSchedulerState>
 800640c:	4603      	mov	r3, r0
 800640e:	2b02      	cmp	r3, #2
 8006410:	d109      	bne.n	8006426 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <xTimerGenericCommand+0x9c>)
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f107 0110 	add.w	r1, r7, #16
 800641a:	2300      	movs	r3, #0
 800641c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641e:	f7fe fbe1 	bl	8004be4 <xQueueGenericSend>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24
 8006424:	e012      	b.n	800644c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xTimerGenericCommand+0x9c>)
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f107 0110 	add.w	r1, r7, #16
 800642e:	2300      	movs	r3, #0
 8006430:	2200      	movs	r2, #0
 8006432:	f7fe fbd7 	bl	8004be4 <xQueueGenericSend>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24
 8006438:	e008      	b.n	800644c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <xTimerGenericCommand+0x9c>)
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	f107 0110 	add.w	r1, r7, #16
 8006442:	2300      	movs	r3, #0
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	f7fe fcd3 	bl	8004df0 <xQueueGenericSendFromISR>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800644e:	4618      	mov	r0, r3
 8006450:	3728      	adds	r7, #40	; 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000c20 	.word	0x20000c20

0800645c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006466:	4b23      	ldr	r3, [pc, #140]	; (80064f4 <prvProcessExpiredTimer+0x98>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3304      	adds	r3, #4
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe fa39 	bl	80048ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d024      	beq.n	80064d2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	18d1      	adds	r1, r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6978      	ldr	r0, [r7, #20]
 8006496:	f000 f8d3 	bl	8006640 <prvInsertTimerInActiveList>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d021      	beq.n	80064e4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	2100      	movs	r1, #0
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f7ff ff86 	bl	80063bc <xTimerGenericCommand>
 80064b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d115      	bne.n	80064e4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	b672      	cpsid	i
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	b662      	cpsie	i
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	6978      	ldr	r0, [r7, #20]
 80064ea:	4798      	blx	r3
}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000c18 	.word	0x20000c18

080064f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f857 	bl	80065b8 <prvGetNextExpireTime>
 800650a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f803 	bl	800651c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006516:	f000 f8d5 	bl	80066c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800651a:	e7f1      	b.n	8006500 <prvTimerTask+0x8>

0800651c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006526:	f7ff fa27 	bl	8005978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f866 	bl	8006600 <prvSampleTimeNow>
 8006534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d130      	bne.n	800659e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <prvProcessTimerOrBlockTask+0x3c>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d806      	bhi.n	8006558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800654a:	f7ff fa23 	bl	8005994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff83 	bl	800645c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006556:	e024      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d008      	beq.n	8006570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <prvProcessTimerOrBlockTask+0x90>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <prvProcessTimerOrBlockTask+0x50>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <prvProcessTimerOrBlockTask+0x52>
 800656c:	2300      	movs	r3, #0
 800656e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <prvProcessTimerOrBlockTask+0x94>)
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	4619      	mov	r1, r3
 800657e:	f7fe ff7d 	bl	800547c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006582:	f7ff fa07 	bl	8005994 <xTaskResumeAll>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <prvProcessTimerOrBlockTask+0x98>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
}
 800659c:	e001      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800659e:	f7ff f9f9 	bl	8005994 <xTaskResumeAll>
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000c1c 	.word	0x20000c1c
 80065b0:	20000c20 	.word	0x20000c20
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <prvGetNextExpireTime+0x44>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <prvGetNextExpireTime+0x16>
 80065ca:	2201      	movs	r2, #1
 80065cc:	e000      	b.n	80065d0 <prvGetNextExpireTime+0x18>
 80065ce:	2200      	movs	r2, #0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <prvGetNextExpireTime+0x44>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e001      	b.n	80065ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000c18 	.word	0x20000c18

08006600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006608:	f7ff fa64 	bl	8005ad4 <xTaskGetTickCount>
 800660c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800660e:	4b0b      	ldr	r3, [pc, #44]	; (800663c <prvSampleTimeNow+0x3c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d205      	bcs.n	8006624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006618:	f000 f93c 	bl	8006894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e002      	b.n	800662a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800662a:	4a04      	ldr	r2, [pc, #16]	; (800663c <prvSampleTimeNow+0x3c>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000c28 	.word	0x20000c28

08006640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d812      	bhi.n	800668c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	d302      	bcc.n	800667a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e01b      	b.n	80066b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800667a:	4b10      	ldr	r3, [pc, #64]	; (80066bc <prvInsertTimerInActiveList+0x7c>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe f8f8 	bl	800487a <vListInsert>
 800668a:	e012      	b.n	80066b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d206      	bcs.n	80066a2 <prvInsertTimerInActiveList+0x62>
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e007      	b.n	80066b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <prvInsertTimerInActiveList+0x80>)
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fe f8e4 	bl	800487a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066b2:	697b      	ldr	r3, [r7, #20]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000c1c 	.word	0x20000c1c
 80066c0:	20000c18 	.word	0x20000c18

080066c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	; 0x38
 80066c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ca:	e0d0      	b.n	800686e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	da1a      	bge.n	8006708 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066d2:	1d3b      	adds	r3, r7, #4
 80066d4:	3304      	adds	r3, #4
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10c      	bne.n	80066f8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	b672      	cpsid	i
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	b662      	cpsie	i
 80066f2:	61fb      	str	r3, [r7, #28]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fe:	6850      	ldr	r0, [r2, #4]
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	6892      	ldr	r2, [r2, #8]
 8006704:	4611      	mov	r1, r2
 8006706:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f2c0 80ae 	blt.w	800686c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	3304      	adds	r3, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe f8e3 	bl	80048ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006726:	463b      	mov	r3, r7
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff ff69 	bl	8006600 <prvSampleTimeNow>
 800672e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b09      	cmp	r3, #9
 8006734:	f200 809b 	bhi.w	800686e <prvProcessReceivedCommands+0x1aa>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <prvProcessReceivedCommands+0x7c>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006769 	.word	0x08006769
 8006744:	08006769 	.word	0x08006769
 8006748:	08006769 	.word	0x08006769
 800674c:	080067e1 	.word	0x080067e1
 8006750:	080067f5 	.word	0x080067f5
 8006754:	08006843 	.word	0x08006843
 8006758:	08006769 	.word	0x08006769
 800675c:	08006769 	.word	0x08006769
 8006760:	080067e1 	.word	0x080067e1
 8006764:	080067f5 	.word	0x080067f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	18d1      	adds	r1, r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006788:	f7ff ff5a 	bl	8006640 <prvInsertTimerInActiveList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d06d      	beq.n	800686e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d062      	beq.n	800686e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	441a      	add	r2, r3
 80067b0:	2300      	movs	r3, #0
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	2100      	movs	r1, #0
 80067b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ba:	f7ff fdff 	bl	80063bc <xTimerGenericCommand>
 80067be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d153      	bne.n	800686e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	b672      	cpsid	i
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	b662      	cpsie	i
 80067da:	61bb      	str	r3, [r7, #24]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067f2:	e03c      	b.n	800686e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10c      	bne.n	800682e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	b672      	cpsid	i
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	b662      	cpsie	i
 8006828:	617b      	str	r3, [r7, #20]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	18d1      	adds	r1, r2, r3
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683c:	f7ff ff00 	bl	8006640 <prvInsertTimerInActiveList>
					break;
 8006840:	e015      	b.n	800686e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006852:	f000 fbc9 	bl	8006fe8 <vPortFree>
 8006856:	e00a      	b.n	800686e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800686a:	e000      	b.n	800686e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800686c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <prvProcessReceivedCommands+0x1cc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	1d39      	adds	r1, r7, #4
 8006874:	2200      	movs	r2, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fb5a 	bl	8004f30 <xQueueReceive>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	f47f af24 	bne.w	80066cc <prvProcessReceivedCommands+0x8>
	}
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	3730      	adds	r7, #48	; 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000c20 	.word	0x20000c20

08006894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800689a:	e04a      	b.n	8006932 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800689c:	4b2e      	ldr	r3, [pc, #184]	; (8006958 <prvSwitchTimerLists+0xc4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a6:	4b2c      	ldr	r3, [pc, #176]	; (8006958 <prvSwitchTimerLists+0xc4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe f819 	bl	80048ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d030      	beq.n	8006932 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d90e      	bls.n	8006900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <prvSwitchTimerLists+0xc4>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7fd ffbe 	bl	800487a <vListInsert>
 80068fe:	e018      	b.n	8006932 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	2100      	movs	r1, #0
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff fd56 	bl	80063bc <xTimerGenericCommand>
 8006910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	b672      	cpsid	i
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	b662      	cpsie	i
 800692c:	603b      	str	r3, [r7, #0]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <prvSwitchTimerLists+0xc4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1af      	bne.n	800689c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <prvSwitchTimerLists+0xc4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <prvSwitchTimerLists+0xc8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a04      	ldr	r2, [pc, #16]	; (8006958 <prvSwitchTimerLists+0xc4>)
 8006948:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800694a:	4a04      	ldr	r2, [pc, #16]	; (800695c <prvSwitchTimerLists+0xc8>)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6013      	str	r3, [r2, #0]
}
 8006950:	bf00      	nop
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000c18 	.word	0x20000c18
 800695c:	20000c1c 	.word	0x20000c1c

08006960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006966:	f000 f949 	bl	8006bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800696a:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <prvCheckForValidListAndQueue+0x60>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d120      	bne.n	80069b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006972:	4814      	ldr	r0, [pc, #80]	; (80069c4 <prvCheckForValidListAndQueue+0x64>)
 8006974:	f7fd ff30 	bl	80047d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006978:	4813      	ldr	r0, [pc, #76]	; (80069c8 <prvCheckForValidListAndQueue+0x68>)
 800697a:	f7fd ff2d 	bl	80047d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <prvCheckForValidListAndQueue+0x6c>)
 8006980:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <prvCheckForValidListAndQueue+0x64>)
 8006982:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006984:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <prvCheckForValidListAndQueue+0x70>)
 8006986:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <prvCheckForValidListAndQueue+0x68>)
 8006988:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800698a:	2300      	movs	r3, #0
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <prvCheckForValidListAndQueue+0x74>)
 8006990:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <prvCheckForValidListAndQueue+0x78>)
 8006992:	2110      	movs	r1, #16
 8006994:	200a      	movs	r0, #10
 8006996:	f7fe f83d 	bl	8004a14 <xQueueGenericCreateStatic>
 800699a:	4603      	mov	r3, r0
 800699c:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <prvCheckForValidListAndQueue+0x60>)
 800699e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <prvCheckForValidListAndQueue+0x60>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <prvCheckForValidListAndQueue+0x60>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	490b      	ldr	r1, [pc, #44]	; (80069dc <prvCheckForValidListAndQueue+0x7c>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fd3a 	bl	8005428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069b4:	f000 f956 	bl	8006c64 <vPortExitCritical>
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000c20 	.word	0x20000c20
 80069c4:	20000bf0 	.word	0x20000bf0
 80069c8:	20000c04 	.word	0x20000c04
 80069cc:	20000c18 	.word	0x20000c18
 80069d0:	20000c1c 	.word	0x20000c1c
 80069d4:	20000ccc 	.word	0x20000ccc
 80069d8:	20000c2c 	.word	0x20000c2c
 80069dc:	0800734c 	.word	0x0800734c

080069e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b04      	subs	r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f023 0201 	bic.w	r2, r3, #1
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a10:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <pxPortInitialiseStack+0x64>)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3b14      	subs	r3, #20
 8006a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3b04      	subs	r3, #4
 8006a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f06f 0202 	mvn.w	r2, #2
 8006a2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3b20      	subs	r3, #32
 8006a34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a36:	68fb      	ldr	r3, [r7, #12]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	08006a49 	.word	0x08006a49

08006a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a52:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <prvTaskExitError+0x5c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d00c      	beq.n	8006a76 <prvTaskExitError+0x2e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	b672      	cpsid	i
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	b662      	cpsie	i
 8006a70:	60fb      	str	r3, [r7, #12]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <prvTaskExitError+0x2c>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	b672      	cpsid	i
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	b662      	cpsie	i
 8006a8a:	60bb      	str	r3, [r7, #8]
}
 8006a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a8e:	bf00      	nop
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0fc      	beq.n	8006a90 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	2000000c 	.word	0x2000000c
	...

08006ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <pxCurrentTCBConst2>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	f380 8809 	msr	PSP, r0
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	4770      	bx	lr
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst2>:
 8006ad0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ad8:	4808      	ldr	r0, [pc, #32]	; (8006afc <prvPortStartFirstTask+0x24>)
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f380 8808 	msr	MSP, r0
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8814 	msr	CONTROL, r0
 8006aea:	b662      	cpsie	i
 8006aec:	b661      	cpsie	f
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	df00      	svc	0
 8006af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006afa:	bf00      	nop
 8006afc:	e000ed08 	.word	0xe000ed08

08006b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b06:	4b37      	ldr	r3, [pc, #220]	; (8006be4 <xPortStartScheduler+0xe4>)
 8006b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	22ff      	movs	r2, #255	; 0xff
 8006b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <xPortStartScheduler+0xe8>)
 8006b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <xPortStartScheduler+0xec>)
 8006b30:	2207      	movs	r2, #7
 8006b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b34:	e009      	b.n	8006b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b36:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <xPortStartScheduler+0xec>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <xPortStartScheduler+0xec>)
 8006b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d0ef      	beq.n	8006b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b56:	4b25      	ldr	r3, [pc, #148]	; (8006bec <xPortStartScheduler+0xec>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1c3 0307 	rsb	r3, r3, #7
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d00c      	beq.n	8006b7c <xPortStartScheduler+0x7c>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <xPortStartScheduler+0xec>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <xPortStartScheduler+0xec>)
 8006b84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <xPortStartScheduler+0xec>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b8e:	4a17      	ldr	r2, [pc, #92]	; (8006bec <xPortStartScheduler+0xec>)
 8006b90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b9a:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <xPortStartScheduler+0xf0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a14      	ldr	r2, [pc, #80]	; (8006bf0 <xPortStartScheduler+0xf0>)
 8006ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ba4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <xPortStartScheduler+0xf0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a11      	ldr	r2, [pc, #68]	; (8006bf0 <xPortStartScheduler+0xf0>)
 8006bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bb2:	f000 f8dd 	bl	8006d70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <xPortStartScheduler+0xf4>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bbc:	f000 f8fc 	bl	8006db8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <xPortStartScheduler+0xf8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <xPortStartScheduler+0xf8>)
 8006bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bcc:	f7ff ff84 	bl	8006ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bd0:	f7ff f84c 	bl	8005c6c <vTaskSwitchContext>
	prvTaskExitError();
 8006bd4:	f7ff ff38 	bl	8006a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	e000e400 	.word	0xe000e400
 8006be8:	20000d1c 	.word	0x20000d1c
 8006bec:	20000d20 	.word	0x20000d20
 8006bf0:	e000ed20 	.word	0xe000ed20
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	e000ef34 	.word	0xe000ef34

08006bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	607b      	str	r3, [r7, #4]
}
 8006c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <vPortEnterCritical+0x60>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	4a0e      	ldr	r2, [pc, #56]	; (8006c5c <vPortEnterCritical+0x60>)
 8006c22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c24:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <vPortEnterCritical+0x60>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d111      	bne.n	8006c50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <vPortEnterCritical+0x64>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <vPortEnterCritical+0x54>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	b672      	cpsid	i
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	b662      	cpsie	i
 8006c4a:	603b      	str	r3, [r7, #0]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <vPortEnterCritical+0x52>
	}
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	2000000c 	.word	0x2000000c
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <vPortExitCritical+0x54>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10c      	bne.n	8006c8c <vPortExitCritical+0x28>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	b672      	cpsid	i
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	b662      	cpsie	i
 8006c86:	607b      	str	r3, [r7, #4]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <vPortExitCritical+0x54>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <vPortExitCritical+0x54>)
 8006c94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c96:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <vPortExitCritical+0x54>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <vPortExitCritical+0x46>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f383 8811 	msr	BASEPRI, r3
}
 8006ca8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c
 8006cbc:	00000000 	.word	0x00000000

08006cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cc0:	f3ef 8009 	mrs	r0, PSP
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <pxCurrentTCBConst>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	f01e 0f10 	tst.w	lr, #16
 8006cd0:	bf08      	it	eq
 8006cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cda:	6010      	str	r0, [r2, #0]
 8006cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ce4:	b672      	cpsid	i
 8006ce6:	f380 8811 	msr	BASEPRI, r0
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	b662      	cpsie	i
 8006cf4:	f7fe ffba 	bl	8005c6c <vTaskSwitchContext>
 8006cf8:	f04f 0000 	mov.w	r0, #0
 8006cfc:	f380 8811 	msr	BASEPRI, r0
 8006d00:	bc09      	pop	{r0, r3}
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	6808      	ldr	r0, [r1, #0]
 8006d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	f01e 0f10 	tst.w	lr, #16
 8006d0e:	bf08      	it	eq
 8006d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d14:	f380 8809 	msr	PSP, r0
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <pxCurrentTCBConst>:
 8006d20:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop

08006d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	b672      	cpsid	i
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	b662      	cpsie	i
 8006d42:	607b      	str	r3, [r7, #4]
}
 8006d44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d46:	f7fe fed5 	bl	8005af4 <xTaskIncrementTick>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <SysTick_Handler+0x44>)
 8006d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f383 8811 	msr	BASEPRI, r3
}
 8006d62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d74:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <vPortSetupTimerInterrupt+0x34>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <vPortSetupTimerInterrupt+0x38>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <vPortSetupTimerInterrupt+0x3c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <vPortSetupTimerInterrupt+0x40>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <vPortSetupTimerInterrupt+0x44>)
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d92:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <vPortSetupTimerInterrupt+0x34>)
 8006d94:	2207      	movs	r2, #7
 8006d96:	601a      	str	r2, [r3, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	e000e010 	.word	0xe000e010
 8006da8:	e000e018 	.word	0xe000e018
 8006dac:	20000000 	.word	0x20000000
 8006db0:	10624dd3 	.word	0x10624dd3
 8006db4:	e000e014 	.word	0xe000e014

08006db8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006db8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006dc8 <vPortEnableVFP+0x10>
 8006dbc:	6801      	ldr	r1, [r0, #0]
 8006dbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dc2:	6001      	str	r1, [r0, #0]
 8006dc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006dc6:	bf00      	nop
 8006dc8:	e000ed88 	.word	0xe000ed88

08006dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dd2:	f3ef 8305 	mrs	r3, IPSR
 8006dd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b0f      	cmp	r3, #15
 8006ddc:	d916      	bls.n	8006e0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dde:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <vPortValidateInterruptPriority+0x78>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006de8:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <vPortValidateInterruptPriority+0x7c>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	7afa      	ldrb	r2, [r7, #11]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d20c      	bcs.n	8006e0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	b672      	cpsid	i
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	b662      	cpsie	i
 8006e06:	607b      	str	r3, [r7, #4]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <vPortValidateInterruptPriority+0x80>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <vPortValidateInterruptPriority+0x84>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d90c      	bls.n	8006e36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
 8006e30:	603b      	str	r3, [r7, #0]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <vPortValidateInterruptPriority+0x68>
	}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	e000e3f0 	.word	0xe000e3f0
 8006e48:	20000d1c 	.word	0x20000d1c
 8006e4c:	e000ed0c 	.word	0xe000ed0c
 8006e50:	20000d20 	.word	0x20000d20

08006e54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e60:	f7fe fd8a 	bl	8005978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e64:	4b5b      	ldr	r3, [pc, #364]	; (8006fd4 <pvPortMalloc+0x180>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e6c:	f000 f91a 	bl	80070a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e70:	4b59      	ldr	r3, [pc, #356]	; (8006fd8 <pvPortMalloc+0x184>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 8092 	bne.w	8006fa2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01f      	beq.n	8006ec4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006e84:	2208      	movs	r2, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d016      	beq.n	8006ec4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f023 0307 	bic.w	r3, r3, #7
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <pvPortMalloc+0x70>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	b672      	cpsid	i
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	b662      	cpsie	i
 8006ebe:	617b      	str	r3, [r7, #20]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d06b      	beq.n	8006fa2 <pvPortMalloc+0x14e>
 8006eca:	4b44      	ldr	r3, [pc, #272]	; (8006fdc <pvPortMalloc+0x188>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d866      	bhi.n	8006fa2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ed4:	4b42      	ldr	r3, [pc, #264]	; (8006fe0 <pvPortMalloc+0x18c>)
 8006ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ed8:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <pvPortMalloc+0x18c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ede:	e004      	b.n	8006eea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <pvPortMalloc+0xa8>
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f1      	bne.n	8006ee0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <pvPortMalloc+0x180>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d04d      	beq.n	8006fa2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	4413      	add	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	2308      	movs	r3, #8
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d921      	bls.n	8006f6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <pvPortMalloc+0x100>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	b672      	cpsid	i
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	b662      	cpsie	i
 8006f4e:	613b      	str	r3, [r7, #16]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f66:	69b8      	ldr	r0, [r7, #24]
 8006f68:	f000 f8fe 	bl	8007168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <pvPortMalloc+0x188>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	4a19      	ldr	r2, [pc, #100]	; (8006fdc <pvPortMalloc+0x188>)
 8006f78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <pvPortMalloc+0x188>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <pvPortMalloc+0x190>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d203      	bcs.n	8006f8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <pvPortMalloc+0x188>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <pvPortMalloc+0x190>)
 8006f8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <pvPortMalloc+0x184>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fa2:	f7fe fcf7 	bl	8005994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00c      	beq.n	8006fca <pvPortMalloc+0x176>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	60fb      	str	r3, [r7, #12]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <pvPortMalloc+0x174>
	return pvReturn;
 8006fca:	69fb      	ldr	r3, [r7, #28]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3728      	adds	r7, #40	; 0x28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	2000492c 	.word	0x2000492c
 8006fd8:	20004938 	.word	0x20004938
 8006fdc:	20004930 	.word	0x20004930
 8006fe0:	20004924 	.word	0x20004924
 8006fe4:	20004934 	.word	0x20004934

08006fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04c      	beq.n	8007094 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	425b      	negs	r3, r3
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b23      	ldr	r3, [pc, #140]	; (800709c <vPortFree+0xb4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10c      	bne.n	8007030 <vPortFree+0x48>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	b672      	cpsid	i
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	b662      	cpsie	i
 800702a:	60fb      	str	r3, [r7, #12]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00c      	beq.n	8007052 <vPortFree+0x6a>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	b672      	cpsid	i
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	b662      	cpsie	i
 800704c:	60bb      	str	r3, [r7, #8]
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <vPortFree+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d019      	beq.n	8007094 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d115      	bne.n	8007094 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <vPortFree+0xb4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007078:	f7fe fc7e 	bl	8005978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <vPortFree+0xb8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4413      	add	r3, r2
 8007086:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <vPortFree+0xb8>)
 8007088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f000 f86c 	bl	8007168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007090:	f7fe fc80 	bl	8005994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20004938 	.word	0x20004938
 80070a0:	20004930 	.word	0x20004930

080070a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070b0:	4b27      	ldr	r3, [pc, #156]	; (8007150 <prvHeapInit+0xac>)
 80070b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00c      	beq.n	80070d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3307      	adds	r3, #7
 80070c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <prvHeapInit+0xac>)
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <prvHeapInit+0xb0>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <prvHeapInit+0xb0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070f0:	2208      	movs	r2, #8
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a15      	ldr	r2, [pc, #84]	; (8007158 <prvHeapInit+0xb4>)
 8007104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007106:	4b14      	ldr	r3, [pc, #80]	; (8007158 <prvHeapInit+0xb4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <prvHeapInit+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvHeapInit+0xb4>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4a0a      	ldr	r2, [pc, #40]	; (800715c <prvHeapInit+0xb8>)
 8007132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a09      	ldr	r2, [pc, #36]	; (8007160 <prvHeapInit+0xbc>)
 800713a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <prvHeapInit+0xc0>)
 800713e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000d24 	.word	0x20000d24
 8007154:	20004924 	.word	0x20004924
 8007158:	2000492c 	.word	0x2000492c
 800715c:	20004934 	.word	0x20004934
 8007160:	20004930 	.word	0x20004930
 8007164:	20004938 	.word	0x20004938

08007168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <prvInsertBlockIntoFreeList+0xac>)
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e002      	b.n	800717c <prvInsertBlockIntoFreeList+0x14>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d8f7      	bhi.n	8007176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d108      	bne.n	80071aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d118      	bne.n	80071f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d00d      	beq.n	80071e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e008      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <prvInsertBlockIntoFreeList+0xb0>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e003      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d002      	beq.n	8007206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20004924 	.word	0x20004924
 8007218:	2000492c 	.word	0x2000492c

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	; (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	; (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <__libc_init_array+0x44>)
 8007230:	f000 f836 	bl	80072a0 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007470 	.word	0x08007470
 8007258:	08007470 	.word	0x08007470
 800725c:	08007470 	.word	0x08007470
 8007260:	08007474 	.word	0x08007474

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <strcpy>:
 8007290:	4603      	mov	r3, r0
 8007292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007296:	f803 2b01 	strb.w	r2, [r3], #1
 800729a:	2a00      	cmp	r2, #0
 800729c:	d1f9      	bne.n	8007292 <strcpy+0x2>
 800729e:	4770      	bx	lr

080072a0 <_init>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

080072ac <_fini>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr
